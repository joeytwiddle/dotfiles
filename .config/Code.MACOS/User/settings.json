// Place your settings in this file to overwrite the default settings
// vim: filetype=javascript
{
    //"git.ignoreLegacyWarning": true,

    "workbench.colorTheme": "Gentle Mary",

    "window.zoomLevel": 0,

    // For macOS
    "editor.fontFamily": "Lucida Console, Lucida Sans Typewriter, Menlo, Monaco, 'Courier New', monospace",
    // Looks a lot like WebStorm
    "editor.fontSize": 11,
    //"editor.fontSize": 11.4,
    //"editor.lineHeight": 14,
    "editor.lineHeight": 13,

    "vim.easymotionMarkerFontFamily": "Lucida Console, Lucida Sans Typewriter, Menlo, Monaco, 'Courier New', monospace",
    "vim.easymotionMarkerFontSize": "11",
    "vim.easymotionMarkerYOffset": -1,

    // For Linux
    //"editor.fontFamily": "Envy Code S12",
    //"editor.fontSize": "13",
    //"editor.lineHeight": "15",

    // For Linux
    //"editor.fontFamily": "'Lucida Sans Typewriter', 'Lucida Console', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'",
    //"editor.fontSize": 12,
    //"editor.lineHeight": 14,

    //"vim.easymotionMarkerFontFamily": "'Lucida Sans Typewriter', 'Lucida Console', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'",
    //"vim.easymotionMarkerFontSize": "12",
    //"vim.easymotionMarkerYOffset": -1,

    // For macOS
    "terminal.integrated.fontSize": 11,
    "terminal.integrated.lineHeight": 1.2,
    //"terminal.integrated.fontWeightBold": "normal",
    // For Linux
    //"terminal.integrated.fontSize": 13,
    //"terminal.integrated.fontFamily": "'Lucida Sans Typewriter'",

    //"editor.renderWhitespace": "boundary",

    "files.autoSave": "onWindowChange",

    //"editor.trimAutoWhitespace": true,
    //"files.trimTrailingWhitespace": true,
    "files.insertFinalNewline": true,

    "breadcrumbs.enabled": true,
    // I think disabling this makes the editor slightly faster, but I could be wrong!
    "editor.minimap.enabled": true,

    // Remember the previous text when opening Cmd-P or Cmd-Shift-P
    //"workbench.quickOpen.preserveInput": true,
    "workbench.commandPalette.preserveInput": true,

    // Enable on Linux, disable on macOS (because it triggers accidentally if I press Cmd while a touchpad scroll is decaying)
    //"editor.mouseWheelZoom": true,

    // Clearer tree structure (default 8)
    "workbench.tree.indent": 18,

    // On startup, open all windows that were open in previous session
    "window.restoreWindows": "all",
    // Allows quitting with unsaved changes.  Changes will be restored on startup.
    //"files.hotExit": "onExit"

    // Oh no this can be terrible.  It may reformat the entire file after a tiny paste, and it sometimes does it wrong!  (Even when prettier is enabled!)
    //"editor.formatOnPaste": true,
    // This was running on some files I wasn't editing.
    //"editor.formatOnSave": true,

    // Open searches below the editor, not in the sidebar
    //"search.location": "panel",

    // I think this enough to stop the CPU going to 100% for 5 minutes after populating node_modules folder
    //"files.watcherExclude": {
    //    "**/node_modules/**": true
    //},

    // Avoid getting unwanted autocompletes when typing '(' or '.'
    "editor.acceptSuggestionOnCommitCharacter": false,

    "npm.enableScriptExplorer": true,

    // Don't insert a space after comment chars
    "editor.comments.insertSpace": false,

    // Let snippets take priority over other things in the suggestions list
    // See: https://github.com/Microsoft/vscode/issues/10565#issuecomment-317319434
    // Specifically I needed this for TypeScript, where a deprecated alias and two imports were suggested before my 'log' snippet
    // But this sucks when I want to see the props on a component I am trying to use.
    //"editor.snippetSuggestions": "top",

    //"workbench.editor.enablePreview": false,
    //"workbench.editor.enablePreviewFromQuickOpen": false,

    //"editor.occurrencesHighlight": false,

    // Make unused variables strongly greyed out
    "workbench.colorCustomizations": {
        // These work, but only the backgrounds not the foregrounds
        // If we don't set them, then the theme can set them
        //"editor.selectionBackground": "#153",
        //"editor.selectionForeground": "#ffffff",
        //"editor.selectionHighlightBackground": "#449059",
        //"editor.selectionHighlightForeground": "#ffffff",

        //"editorWarning.foreground": "#dd8800",
        "editorWarning.foreground": "#ffdd0099",
        "editorError.foreground": "#ff4444",
        //"breadcrumb.foreground": "#888888",

        "editorUnnecessaryCode.opacity": "#00000080",

        // For usernamehw.errorlens
        //"errorLens.errorBackground": "#ff00001c",
        //"errorLens.warningBackground": "#ff880012",
        //"errorLens.infoBackground": "#0000ff00",
        //"errorLens.hintBackground": "#00ffff00",
        "errorLens.errorBackground": "#ff000000",
        "errorLens.warningBackground": "#ff880000",
        "errorLens.infoBackground": "#0000ff00",
        "errorLens.hintBackground": "#00ffff00",
        //"errorLens.errorForeground": "#888888ff",
        "errorLens.errorForeground": "#ff888855",
        "errorLens.warningForeground": "#555555ff",
        //"errorLens.warningForeground": "#ffdd2222",
        "errorLens.infoForeground": "#555555ff",
        "errorLens.hintForeground": "#555555ff",
        //"errorLens.errorForeground": "#88888800",
        //"errorLens.warningForeground": "#88888800",
        //"errorLens.infoForeground": "#55555500",
        //"errorLens.hintForeground": "#55555500",
        //"errorLens.fontWeight": 200,
        //"errorLens.fontStyleItalic": false,

        // Testing for theme
        // For the active search result
        "editor.findMatchBackground": "#0044bbaa",
        "editor.findMatchBorder": "#ffff00ff",
        // For the other seach results
        // I turned off the border because it made code difficult to read, and I don't know any way to turn off the highlighting without actually clearing the search.
        "editor.findMatchHighlightBackground": "#0044bbaa",
        "editor.findMatchHighlightBorder": "#ffff0000",
        // I don't know what this is, so I'm giving it a strong highlight until I meet it
        "editor.findRangeHighlightBackground": "#8800bb",
        "editor.findRangeHighlightBorder": "#ff0000ff",

        "[Gentle Mary]": {
            "sideBarSectionHeader.foreground": "#cccccc",
            "sideBarSectionHeader.border": "#3c3c3c",
        },
    },

    // It's probably better to enable these settings in the .vscode folder local to each workspace/project
    // Use TypeScript to check JSDocs in Javascript files
    //"javascript.implicitProjectConfig.checkJs": true,
    // For more on that: https://devblogs.microsoft.com/typescript/how-to-upgrade-to-typescript-without-anybody-noticing-part-1/
    //"javascript.implicitProjectConfig.experimentalDecorators": false,

    // Default: languageDefined
    "editor.autoClosingBrackets": "never",

    // These built-in feature will auto create the end tag after we type the start tag: <button>|</button>
    // I find it often unhelpful, e.g. if I am trying to put <div>...</div> around existing markup, so I disable it
    "html.autoClosingTags": false,
    "javascript.autoClosingTags": false,
    "typescript.autoClosingTags": false,

    //"html.mirrorCursorOnMatchingTag": true,

    "typescript.updateImportsOnFileMove.enabled": "always",

    "[javascript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[javascriptreact]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescriptreact]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[html]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[json]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[jsonc]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },



    // === Settings for plugins === //

    // For ESLint
    //"eslint.enable": true,
    // Is this too heavy?
    //"autoimport.filesToScan": "**/*.{ts,tsx,js,jsx}",
    // Tell the eslint plugin to also check TypeScript files
    "eslint.validate": [
        "javascript",
        "javascriptreact",
        "typescript",
        "typescriptreact"
    ],

    // For steoates.autoimport
    //"autoimport.filesToScan": "**/*.{ts,tsx,js,jsx}",

    // For Error Lens
    /*
    //"errorLens.errorBackground": "#ff00001c",
    //"errorLens.warningBackground": "#ff880012",
    //"errorLens.infoBackground": "#0000ff00",
    //"errorLens.hintBackground": "#00ffff00",
    "errorLens.errorBackground": "#ff000000",
    "errorLens.warningBackground": "#ff880000",
    "errorLens.infoBackground": "#0000ff00",
    "errorLens.hintBackground": "#00ffff00",
    "errorLens.errorForeground": "#888888ff",
    "errorLens.warningForeground": "#888888ff",
    "errorLens.infoForeground": "#555555ff",
    "errorLens.hintForeground": "#555555ff",
    //"errorLens.errorForeground": "#88888800",
    //"errorLens.warningForeground": "#88888800",
    //"errorLens.infoForeground": "#55555500",
    //"errorLens.hintForeground": "#55555500",
    //"errorLens.fontWeight": 200,
    //"errorLens.fontStyleItalic": false,
    */

    // For GitLens
    "gitlens.codeLens.enabled": false,
    "gitlens.currentLine.enabled": false,
    //"gitlens.hovers.currentLine.over": "line",
    //"gitlens.blame.compact": false,

    // For Trailing Spaces
    "trailing-spaces.deleteModifiedLinesOnly": true,
    "trailing-spaces.highlightCurrentLine": false,
    //"trailing-spaces.backgroundColor": "#552222",
    //"trailing-spaces.borderColor": "#552222",

    // For TodoTree
    "todo-tree.highlights.defaultHighlight": {
        "icon": "alert",
        "type": "text",
        "foreground": "#dd8800",
        // "background": "white",
        "opacity": 50,
        "iconColour": "blue"
    },
    "todo-tree.general.tags": [
        "TODO",
        "@todo",
        "FIXME",
        "@fixme",
        "BUG",
        "@bug",
        "CONSIDER",
        "@consider"
    ],
    /*
    "todo-tree.highlights.customHighlight": {
        "TODO": {
            "icon": "check",
            "type": "line",
            "foreground": "#dd8800",
        },
        "FIXME": {
            "foreground": "black",
            "iconColour": "yellow",
        },
    },
    */

    // For TODO Highlight
    /*
    "todohighlight.keywords": [
        "TODO",
        "@todo",
        "FIXME",
        "@fixme",
        "BUG",
        "@bug",
        "CONSIDER",
        "@consider"
    ],
    "todohighlight.defaultStyle": {
        //"color": "red",
        //"backgroundColor": "#ffab00",
        //"overviewRulerColor": "#ffab00",
        "backgroundColor": "none",
        "color": "#dd8800",
        "cursor": "pointer",
        "border": "1px solid #eee",
        "borderRadius": "2px",
        "isWholeLine": false,
    },
    */

    // For VSCodeVim
    // Docs: https://github.com/VSCodeVim/Vim
    // Default keybinds: https://github.com/VSCodeVim/Vim/blob/master/ROADMAP.md
    "vim.easymotion": true,
    //"vim.sneak": true, // Didn't make any difference to <kbd>f</kbd> when I tried it.  Oh is it supposed to be two char?
    //"vim.incsearch": true,
    //"vim.useSystemClipboard": true,
    //"vim.useCtrlKeys": true,
    "vim.hlsearch": true,
    // These are true by default
    //"vim.ignorecase": false,
    //"vim.smartcase": false,
    "vim.highlightedyank.enable": true,
    "vim.normalModeKeyBindingsNonRecursive": [
        { "before": [ "C-O" ], "commands": [ "workbench.action.navigateBack" ] },
        { "before": [ "C-I" ], "commands": [ "workbench.action.navigateForward" ] },
        // As well as clearing the highlight, we also want Ctrl-L to hide any current popups
        // We tried "after": [ "S-Esc" ] and [ "S-Escape" ] but they didn't work.
        // So instead we list the commands directly (but there are many!)
        { "before": [ "C-L" ], "commands": [ ":nohlsearch", "closeAccessibilityHelp", "closeParameterHints", "closeReferenceSearch", "closeReferenceSearchEditor", "hideSuggestWidget", "workbench.action.closeQuickOpen" ] },
        // Ctrl-S: I use this in Vim to save all
        // That is actually more powerful than Cmd-S in VSCode, because that only saves the current file.
        // Neither of these worked for me:
        //{ "before": [ "C-S" ], "commands": [ "workbench.action.files.saveAll" ] },
        //{ "before": [ "C-S" ], "commands": [ ":wa" ] },
        // But I put a C-S keybinding in keybindings.json, and that one worked.
        { "before": [ "[", " " ], "after": [ "O", "<Esc>" ] },
        { "before": [ "]", " " ], "after": [ "o", "<Esc>" ] },
        { "before": [ "[", "b" ], "commands": [ "workbench.action.previousEditor" ] },
        { "before": [ "]", "b" ], "commands": [ "workbench.action.nextEditor" ] },
        { "before": [ "[", "q" ], "commands": [ "search.action.focusPreviousSearchResult" ], "when": "hasSearchResult" },
        { "before": [ "]", "q" ], "commands": [ "search.action.focusNextSearchResult" ], "when": "hasSearchResult" },
        { "before": [ "[", "l" ], "commands": [ "editor.action.marker.prevInFiles" ], "when": "editorTextFocus" },
        { "before": [ "]", "l" ], "commands": [ "editor.action.marker.nextInFiles" ], "when": "editorTextFocus" },
        { "before": [ "[", "g" ], "commands": [ "workbench.action.editor.previousChange" ], "when": "editorTextFocus" },
        { "before": [ "]", "g" ], "commands": [ "workbench.action.editor.nextChange" ], "when": "editorTextFocus" },
        { "before": [ "[", "w" ], "commands": [ "workbench.action.focusPreviousGroup" ] },
        { "before": [ "]", "w" ], "commands": [ "workbench.action.focusNextGroup" ] },
        { "before": [ "C-W", "s" ], "commands": [ "workbench.action.splitEditorDown" ] },
        { "before": [ "C-W", "S" ], "commands": [ "workbench.action.splitEditorRight" ] },
        { "before": [ "C-W", "c" ], "commands": [ "workbench.action.closeGroup" ] },
        { "before": [ "<Leader>", "b", "d" ], "commands": [ "workbench.action.closeActiveEditor" ] },
        // This just opens a VSCode prompt for a URL, it doesn't actually open the hovered URL in a browser, which is what we want
        //{ "before": [ "g", "x" ], "commands": [ "workbench.action.url.openUrl" ] },
        { "before": [ "C-U" ], "commands": [ "workbench.action.openPreviousRecentlyUsedEditor" ] },
        { "before": [ "C-J" ], "commands": [ "scrollLineDown", "scrollLineDown" ] },
        { "before": [ "C-K" ], "commands": [ "scrollLineUp", "scrollLineUp" ] },
        // For Linux
        { "before": [ "C-S-J" ], "commands": [ "workbench.action.togglePanel" ] },
        { "before": [ "<Leader>", "j" ], "commands": [ "workbench.action.togglePanel" ] },
        { "before": [ "<Leader>", "w" ], "commands": [ "editor.action.toggleWordWrap" ] },
        { "before": [ "<Leader>", "r" ], "after": [ "v", "i", "w", "<Cmd-Alt-F>" ], "commands": [ "editor.action.startFindReplaceAction" ] },
        { "before": [ "<Leader>", "<Leader>", "r" ], "after": [ "v", "i", "w", "<Cmd-Alt-F>" ], "commands": [ "workbench.action.replaceInFiles" ] },
        { "before": [ "<Leader>", "R" ], "commands": [ "editor.action.rename" ], "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
        { "before": [ "<Leader>", "s" ], "commands": [ "workbench.action.openRecent" ] },
        // We might want to move these into keybindings.json, so they work on all windows
        { "before": [ "<Leader>", "b", "d" ], "commands": [ "workbench.action.closeActiveEditor" ] },
        { "before": [ "C-W", "d" ], "commands": [ "workbench.action.closeActiveEditor" ] },
        { "before": [ "C-B", "d" ], "commands": [ "workbench.action.closeActiveEditor" ] },
        // revealDefinition works more often than goToImplementation
        //{ "before": [ "C-]" ], "commands": [ "editor.action.revealDefinition" ], "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
        { "before": [ "g", "d" ], "commands": [ "editor.action.revealDefinition" ], "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
        //{ "before": [ "g", "D" ], "commands": [ "editor.action.goToImplementation" ], "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor" },
        //{ "before": [ "g", "D" ], "after": [ "*", "g", "g", "n" ] },
        { "before": [ "g", "D" ], "after": [ "*", "g", "g", "n", "n", "N" ] },
        { "before": [ "g", "u" ], "commands": [ "editor.action.goToReferences" ], "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
        { "before": [ "g", "U" ], "commands": [ "editor.action.goToReferences" ], "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
        { "before": [ "g", "H" ], "commands": [ "editor.action.showDefinitionPreviewHover" ] },
        { "before": [ "<Leader>", "a" ], "commands": [ "gitlens.toggleLineBlame" ] },
        { "before": [ "<Leader>", "A" ], "commands": [ "gitlens.toggleFileBlame" ] },
        { "before": [ "<Leader>", "l", "o", "g" ], "after": [ "\"", "l", "y", "i", "w", "o", "c", "o", "n", "s", "o", "l", "e", ".", "l", "o", "g", "(", "\"", "C-R", "l", ":", "\"", ",", " ", "C-R", "l", ")", ";", "Esc" ] },
        { "before": [ "<Leader>", "L", "o", "g" ], "after": [ "\"", "l", "y", "i", "W", "o", "c", "o", "n", "s", "o", "l", "e", ".", "l", "o", "g", "(", "\"", "C-R", "l", ":", "\"", ",", " ", "C-R", "l", ")", ";", "Esc" ] },
        // EasyMotion search character
        { "before": [ "C-D" ], "after": [ "leader", "leader", "s" ] },
        // EasyMotion start of word
        { "before": [ "C-G"] , "after": [ "leader", "leader", "leader", "b", "d", "w" ] },
        { "before": [ "<Leader>", "f" ] , "after": [ "v", "i", "w" ], "commands": [ "workbench.action.findInFiles" ] },
    ],
    "vim.visualModeKeyBindingsNonRecursive": [
        // For Linux: If we hit paste (Ctrl-V) when something is selected, replace the selection with the clipboard
        { "before": [ "C-V" ], "after": [ "s", "C-R", "+", "Esc" ] },
        { "before": [ "<Leader>", "l", "o", "g" ], "after": [ "\"", "l", "y", "o", "c", "o", "n", "s", "o", "l", "e", ".", "l", "o", "g", "(", "\"", "C-R", "l", ":", "\"", ",", " ", "C-R", "l", ")", ";", "Esc" ] },
    ],
    "vim.insertModeKeyBindingsNonRecursive": [
        // Unfortunately the = command can also affect other lines which are not highlighted.  Better not.
        //{ "before": [ "}" ], "after": [ "}", "<Esc>", "v", "a", "}", "=", "g", "v", "<Esc>" ], "when": "editTextFocus && !editorReadonly" },
    ],

    "vim.searchHighlightColor": "#0044bbaa",
    "vim.searchHighlightTextColor": "#ffffff",

    "vim.easymotionMarkerBackgroundColor": "#000",
    "vim.easymotionMarkerForegroundColorOneChar": "#ff0000",
    "vim.easymotionMarkerForegroundColorTwoChar": "#ffb400",

    // For ZenTabs
    //"workbench.editor.enablePreviewFromQuickOpen": false,
    //"workbench.editor.enablePreview": false,
    "zentabs.maximumOpenedTabs": 8,
    "zentabs.applyLimitFor": "editorGroup",

    // For macros
    // We can execute these macros from keybindings.json
    "macros": {
        "commentLineAndMoveDown": ["editor.action.commentLine", "cursorDown"],
    },

    // https://medium.com/hack-visual-studio-code/toggle-any-setting-in-vs-code-using-keyboard-shortcut-arguments-cdb5ddc56955
    "settings.cycle": [
        {
            "setting": "search.location",
            "values": [
                "panel",
                "sidebar"
            ]
        }
    ],

    // For Auto Close Tag
    // This will auto close tag when just typing </
    // See also bundled settings "*.autoClosingTags"
    // This adds support for JSX/TSX which do not have bundled support
    // Unfortunately the plugin tends to cause my editor to freeze up, so disabled for now
    // (Or it might be Auto Rename Tag that causes it, but I think it's actually this)
    "auto-close-tag.SublimeText3Mode": true,
    "auto-close-tag.enableAutoCloseTag": false,
}
