// Place your settings in this file to overwrite the default settings
// vim: filetype=javascript
// prettier-ignore
{
    // macOS: 'HasklugNerdFontCompleteNerdFontM-Regular', 
    "editor.fontFamily": "'Lucida Console', 'Lucida Sans Typewriter', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'",
    //"editor.fontFamily": "'Hasklug Nerd Font', 'JetBrains Mono'",
    "editor.fontSize": 12,
    //"editor.fontWeight": 500,
    //"editor.fontFamily": "'sans'",
    //"editor.fontSize": 12.7,
    "editor.lineHeight": 14,

    //"vim.easymotionMarkerFontFamily": "'Lucida Console', 'Lucida Sans Typewriter', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'",
    //"vim.easymotionMarkerFontSize": "12",
    //"vim.easymotionMarkerYOffset": -1,

    // For macOS
    //"terminal.integrated.fontSize": 11,
    //"terminal.integrated.lineHeight": 1.1,
    //"terminal.integrated.fontWeightBold": "normal",
    // For Linux
    "terminal.integrated.fontSize": 12,
    "terminal.integrated.fontFamily": "'Lucida Console', 'Lucida Sans Typewriter', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'",

    "debug.console.fontSize": 11,
    "debug.console.fontFamily": "'Lucida Console', 'Lucida Sans Typewriter', 'Droid Sans Mono', 'monospace', monospace, 'Droid Sans Fallback'",

    "workbench.colorTheme": "Gentle Mary",

    //"editor.renderWhitespace": "boundary",

    "files.autoSave": "onWindowChange",

    //"editor.trimAutoWhitespace": true,
    //"files.trimTrailingWhitespace": true,
    "files.insertFinalNewline": true,

    "breadcrumbs.enabled": true,
    // I think disabling this makes the editor slightly faster, but I could be wrong!
    "editor.minimap.enabled": true,
    "editor.bracketPairColorization.enabled": false,
    "editor.foldingImportsByDefault": true,

    "explorer.confirmDelete": false,

    // Enable on Linux, disable on macOS (because it triggers accidentally if I press Cmd while a touchpad scroll is decaying)
    "editor.mouseWheelZoom": true,

    // Limit the number of editors to keep open
    "workbench.editor.limit.enabled": true,
    "workbench.editor.limit.perEditorGroup": true,
    "workbench.editor.limit.value": 11,
    "workbench.editor.wrapTabs": true,

    // Displays extra info (like 'M' or 'U' or a number) in the tab if the file has uncommitted changes
    "workbench.editor.decorations.badges": true,

    // I find it easier to see the tree structure with a wider indent (default 8)
    //"workbench.tree.indent": 8,
    "workbench.tree.indent": 12,
    //"workbench.tree.indent": 20,
    // For deep trees, you will eventually need this, even with a low/default indent
    "workbench.list.horizontalScrolling": true,

    // On startup, open all windows that were open in previous session
    "window.restoreWindows": "all",
    // Allows quitting with unsaved changes.  Changes will be restored on startup.
    //"files.hotExit": "onExit"

    // Oh no this can be terrible.  It may reformat the entire file after a tiny paste, and it sometimes does it wrong!  (Even when prettier is enabled!)
    //"editor.formatOnPaste": true,
    // This was running on some files I wasn't editing.
    //"editor.formatOnSave": true,

    // Open searches below the editor, not in the sidebar
    //"search.location": "panel",

    // I think this enough to stop the CPU going to 100% for 5 minutes after populating node_modules folder
    "files.watcherExclude": {
        "**/node_modules/**": true
    },

    // Avoid getting unwanted autocompletes when typing '(' or '.'
    "editor.acceptSuggestionOnCommitCharacter": false,

    // No longer a setting.  Now toggled in the sidebar Views menu.
    //"npm.enableScriptExplorer": true,

    // Don't insert a space after comment chars
    "editor.comments.insertSpace": false,

    // Let snippets take priority over other things in the suggestions list
    // See: https://github.com/Microsoft/vscode/issues/10565#issuecomment-317319434
    // Specifically I needed this for TypeScript, where a deprecated alias and two imports were suggested before my 'log' snippet
    // But this sucks when I want to see the props on a component I am trying to use.
    // And now I'm using \log in vim mode
    //"editor.snippetSuggestions": "top",

    // Controls if quick suggestions should show up while typing
    "editor.quickSuggestions": {
        "other": true,
        "comments": false,
        "strings": false
    },

    // Emmet abbreviations were getting in the way of more useful suggestions
    // We can use this to move them down the list
    // Although it will of course affect all other types of snippets too
    "emmet.showSuggestionsAsSnippets": true,
    "editor.snippetSuggestions": "bottom",

    // Intellisense settings, from https://code.visualstudio.com/docs/editor/intellisense#_customizing-intellisense
    // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
    //"editor.acceptSuggestionOnCommitCharacter": true,
    // Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change
    //"editor.acceptSuggestionOnEnter": "on",
    // Controls the delay in ms after which quick suggestions will show up.
    //"editor.quickSuggestionsDelay": 10,
    // Controls if suggestions should automatically show up when typing trigger characters
    //"editor.suggestOnTriggerCharacters": true,
    // Controls if pressing tab inserts the best suggestion and if tab cycles through other suggestions
    "editor.tabCompletion": "on",
    // Controls whether sorting favours words that appear close to the cursor
    //"editor.suggest.localityBonus": true,
    // Controls how suggestions are pre-selected when showing the suggest list
    //"editor.suggestSelection": "recentlyUsed",
    // Enable word based suggestions
    //"editor.wordBasedSuggestions": true,
    // Enable parameter hints
    //"editor.parameterHints.enabled": true,

    //"workbench.editor.enablePreview": false,
    //"workbench.editor.enablePreviewFromQuickOpen": false,

    //"editor.occurrencesHighlight": false,

    "workbench.colorCustomizations": {
        // These work, but only the backgrounds not the foregrounds
        // If we don't set them, then the theme can set them
        //"editor.selectionBackground": "#153",
        //"editor.selectionForeground": "#ffffff",
        //"editor.selectionHighlightBackground": "#449059",
        //"editor.selectionHighlightForeground": "#ffffff",

        // Highlights all/other occurrences of the word under the cursor
        //"editor.wordHighlightBackground": "#006600aa",
        //"editor.wordHighlightStrongBackground": "#006600aa",
        //"editor.wordHighlightBorder": "#006600ff",
        //"editor.wordHighlightStrongBorder": "#006600ff",

        // For the active search result
        "editor.findMatchBackground": "#0044bbaa",
        "editor.findMatchBorder": "#ffff00dd",
        // For the other seach results
        // I turned off the border because it made code difficult to read, and I don't know any way to turn off the highlighting without actually clearing the search.
        "editor.findMatchHighlightBackground": "#0044bbaa",
        "editor.findMatchHighlightBorder": "#ffff0000",

        // Looking for these ... !
        "editor.findRangeHighlightBackground": "#00ff00",
        "editor.findRangeHighlightBorder": "#ff00ff",

        //"editorWarning.foreground": "#dd8800",
        "editorWarning.foreground": "#ffdd0099",
        "editorError.foreground": "#ff4444",
        //"breadcrumb.foreground": "#888888",

        // I like to make unused code stand apart visually, so I make it darker than the default
        "editorUnnecessaryCode.opacity": "#00000080",

        // Make folded (collapsed) lines clear, Vim style
        "editor.foldBackground": "#0000ff80",

        //"editorBracketMatch.border": "#00000000",
        //"editorBracketMatch.background": "#111111",
        "editorBracketMatch.border": "#00000000",
        "editorBracketMatch.background": "#0000ffbb",
        //"editorBracketMatch.border": "#0000ffff",
        //"editorBracketMatch.background": "#00000000",

        // For usernamehw.errorlens
        //"errorLens.errorBackground": "#ff00001c",
        //"errorLens.warningBackground": "#ff880012",
        //"errorLens.infoBackground": "#0000ff00",
        //"errorLens.hintBackground": "#00ffff00",
        "errorLens.errorBackground": "#ff000000",
        "errorLens.warningBackground": "#ff880000",
        "errorLens.infoBackground": "#0000ff00",
        "errorLens.hintBackground": "#00ffff00",
        //"errorLens.errorForeground": "#888888ff",
        "errorLens.errorForeground": "#ff888855",
        "errorLens.warningForeground": "#555555ff",
        //"errorLens.warningForeground": "#ffaa0055",
        "errorLens.infoForeground": "#555555ff",
        "errorLens.hintForeground": "#555555ff",
        //"errorLens.errorForeground": "#88888800",
        //"errorLens.warningForeground": "#88888800",
        //"errorLens.infoForeground": "#55555500",
        //"errorLens.hintForeground": "#55555500",
        //"errorLens.fontWeight": 200,
        //"errorLens.fontStyleItalic": false,

        //"editorGutter.background": "#303030",
        //"editor.background": "#1c2426",

        "scrollbarSlider.background": "#88888866",
        "scrollbarSlider.hoverBackground": "#88888888",
        "scrollbarSlider.activeBackground": "#88888888",

        "list.activeSelectionBackground": "#0000002a",
        "list.inactiveSelectionBackground": "#0000002a",
        //"list.dropBackground": "#0000002a",
        //"list.focusBackground": "#0000002a",
        "list.focusForeground": "#fff",
    },

    "editor.tokenColorCustomizations": {
        // If you want to play with syntax highlighting customisations, they go here:
        "textMateRules": [
            //{ "name": "String", "scope": "string", "settings": { "fontStyle": "", "foreground": "#E6DB74" } },
            {
                "scope": "meta.path.search",
                "settings": {
                    //"foreground": "#ffffff",
                    "foreground": "#88CCCC",
                    "fontStyle": "bold"
                }
            },
            {
                "scope": "meta.resultLinePrefix.lineNumber.search",
                "settings": {
                    "foreground": "#777777"
                }
            },
        ]
    },

    // It's probably better to enable these settings in the .vscode folder local to each workspace/project
    // In fact, the best way is to add `@ts-check` to all JS files.
    // Use TypeScript to check JSDocs in Javascript files
    // Old: "javascript.implicitProjectConfig.checkJs": true,
    // New:
    // Disabled for now, to reduce CPU gobbling
    //"js/ts.implicitProjectConfig.checkJs": true,
    // For more on that: https://devblogs.microsoft.com/typescript/how-to-upgrade-to-typescript-without-anybody-noticing-part-1/
    //"javascript.implicitProjectConfig.experimentalDecorators": false,
    // Scan entire project for problems (not just open files) https://stackoverflow.com/q/55201424/99777
    // This is heavy on CPU, but on some projects, it may give you an early warning about errors
    "typescript.tsserver.experimental.enableProjectDiagnostics": true,

    // Default: languageDefined
    //"editor.autoClosingBrackets": "never",
    "editor.autoClosingBrackets": "languageDefined",
    "javascript.autoClosingTags": false,
    "typescript.autoClosingTags": false,

    // Deprecated: "html.mirrorCursorOnMatchingTag": true,
    // Old: "editor.renameOnType": true,
    "editor.linkedEditing": true,

    "javascript.updateImportsOnFileMove.enabled": "always",
    "typescript.updateImportsOnFileMove.enabled": "always",

    "files.associations": {
        "*.uc.jpp": "unrealscript",
        "*.js.jpp": "javascript",
        "*.spp*": "asm"
    },

    "[javascript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[javascriptreact]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescriptreact]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[html]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[json]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[jsonc]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },

    // Python (just trying this out; it might be too strong)
    "python.analysis.typeCheckingMode": "strict",

    // === Settings for plugins === //

    // For ESLint
    //"eslint.enable": true,
    //"eslint.debug": true,
    //"eslint.run": "onSave",
    "eslint.format.enable": true,
    "eslint.lintTask.enable": true,
    // Is this too heavy?
    //"autoimport.filesToScan": "**/*.{ts,tsx,js,jsx}",
    // Tell the eslint plugin to also check TypeScript files
    "eslint.validate": [
        "javascript",
        "javascriptreact",
        "typescript",
        "typescriptreact"
    ],
    //"gitlens.hovers.currentLine.over": "line",
    //"gitlens.blame.compact": false,
    "gitlens.heatmap.toggleMode": "window",
    "gitlens.heatmap.hotColor": "#f6a60a",
    "gitlens.heatmap.coldColor": "#0a62f6",
    //"gitlens.defaultGravatarsStyle": "wavatar",

    // For Trailing Spaces
    "trailing-spaces.deleteModifiedLinesOnly": true,
    "trailing-spaces.highlightCurrentLine": false,
    //"trailing-spaces.backgroundColor": "#552222",
    //"trailing-spaces.borderColor": "#552222",

    // For TodoTree
    "todo-tree.tree.showScanModeButton": false,
    "todo-tree.highlights.defaultHighlight": {
        "icon": "alert",
        "type": "text",
        "foreground": "#dd8800",
        // "background": "white",
        "opacity": 50,
        "iconColour": "#25f"
    },
    "todo-tree.general.tags": [
        "TODO",
        "@todo",
        "FIXME",
        "@fixme",
        "BUG",
        "@bug",
        "CONSIDER",
        "@consider",
        "[ ]",
        "[x]"
    ],
    /*
    "todo-tree.highlights.customHighlight": {
        "TODO": {
            "icon": "check",
            "type": "line",
            "foreground": "#dd8800",
        },
        "FIXME": {
            "foreground": "black",
            "iconColour": "yellow",
        },
    },
    */
    /* This was added by the plugin itself */
    "todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",

    // For TODO Highlight
    /*
    "todohighlight.keywords": [
        "TODO",
        "@todo",
        "FIXME",
        "@fixme",
        "BUG",
        "@bug",
        "CONSIDER",
        "@consider"
    ],
    "todohighlight.defaultStyle": {
        //"color": "red",
        //"backgroundColor": "#ffab00",
        //"overviewRulerColor": "#ffab00",
        "backgroundColor": "none",
        "color": "#dd8800",
        "cursor": "pointer",
        "border": "1px solid #eee",
        "borderRadius": "2px",
        "isWholeLine": false,
    },
    */

    // For VSCodeVim
    // Docs: https://github.com/VSCodeVim/Vim
    // Default keybinds: https://github.com/VSCodeVim/Vim/blob/master/ROADMAP.md
    "vim.easymotion": true,
    //"vim.sneak": true, // Didn't make any difference to <kbd>f</kbd> when I tried it.  Oh is it supposed to be two char?
    //"vim.incsearch": true,
    //"vim.useSystemClipboard": true,
    //"vim.useCtrlKeys": true,
    "vim.hlsearch": true,
    "vim.ignorecase": false,
    "vim.smartcase": false,
    "vim.highlightedyank.enable": true,
    "vim.normalModeKeyBindingsNonRecursive": [
        // VSCode's undo has some issues: namely that it is not atomic - it sometimes affects multiple lines (which could include a line off-screen!)
        // Discussion here: https://github.com/VSCodeVim/Vim/issues/2007
        // So let's use VSCode's built-in undo for now
        { "before": [ "u" ], "commands": ["undo"] },
        { "before": [ "C-R" ], "commands": ["redo"] },
        // Other Vim keystrokes that weren't working for me in Vim-VSCode
        { "before": [ "C-O" ], "commands": [ "workbench.action.navigateBack" ] },
        { "before": [ "C-I" ], "commands": [ "workbench.action.navigateForward" ] },
        { "before": [ "C-W", "c" ], "commands": [ "workbench.action.closeGroup" ] },
        { "before": [ "C-W", "s" ], "commands": [ "workbench.action.splitEditorDown" ] },
        { "before": [ "C-W", "S" ], "commands": [ "workbench.action.splitEditorRight" ] },
        { "before": [ "C-T" ], "commands": [ "workbench.action.showAllSymbols" ] },
        // Not working (no better with "Equal" or "Equals")
        //{ "before": [ "=", "=" ] , "commands": [ "editor.action.formatDocument" ], "when": "editorTextFocus && !editorReadonly" },

        // vim-unnimpaired https://github.com/tpope/vim-unimpaired/blob/master/doc/unimpaired.txt
        // We are collecting some of these here: https://github.com/VSCodeVim/Vim/issues/3263
        { "before": [ "[", " " ], "after": [ "O", "<Esc>" ] },
        { "before": [ "]", " " ], "after": [ "o", "<Esc>" ] },
        { "before": [ "[", "b" ], "commands": [ "workbench.action.previousEditor" ] },
        { "before": [ "]", "b" ], "commands": [ "workbench.action.nextEditor" ] },
        { "before": [ "[", "l" ], "commands": [ "editor.action.marker.prevInFiles" ], "when": "editorTextFocus" },
        { "before": [ "]", "l" ], "commands": [ "editor.action.marker.nextInFiles" ], "when": "editorTextFocus" },
        { "before": [ "[", "q" ], "commands": [ "search.action.focusPreviousSearchResult" ], "when": "hasSearchResult" },
        { "before": [ "]", "q" ], "commands": [ "search.action.focusNextSearchResult" ], "when": "hasSearchResult" },
        { "before": [ "[", "f" ], "commands": [ "workbench.view.explorer", "list.focusUp", "explorer.openAndPassFocus" ] },
        { "before": [ "]", "f" ], "commands": [ "workbench.view.explorer", "list.focusDown", "explorer.openAndPassFocus" ] },
        { "before": [ "[", "[", "f" ], "commands": [ "workbench.view.explorer", "list.focusUp", "list.focusUp", "explorer.openAndPassFocus" ] },
        { "before": [ "]", "]", "f" ], "commands": [ "workbench.view.explorer", "list.focusDown", "list.focusDown", "explorer.openAndPassFocus" ] },
        { "before": [ "]", "e" ], "commands": [ "editor.action.moveLinesDownAction" ], "when": "editorTextFocus" },
        { "before": [ "[", "e" ], "commands": [ "editor.action.moveLinesUpAction" ], "when": "editorTextFocus" },
        { "before": [ "[", "g" ], "commands": [ "workbench.action.editor.previousChange" ] },
        { "before": [ "]", "g" ], "commands": [ "workbench.action.editor.nextChange" ] },
        { "before": [ "]", "c" ], "commands": [ "editor.action.dirtydiff.next" ] },
        { "before": [ "[", "c" ], "commands": [ "editor.action.dirtydiff.previous" ] },
        { "before": [ "]", "c" ], "commands": [ "workbench.action.compareEditor.nextChange" ] },
        { "before": [ "[", "c" ], "commands": [ "workbench.action.compareEditor.previousChange" ] },
        { "before": [ "[", "r" ], "commands": [ "references-view.prev" ], "when": "reference-list.hasResult" },
        { "before": [ "]", "r" ], "commands": [ "references-view.next" ], "when": "reference-list.hasResult" },
        { "before": [ "[", "w" ], "commands": [ "workbench.action.focusPreviousGroup" ] },
        { "before": [ "]", "w" ], "commands": [ "workbench.action.focusNextGroup" ] },

        // Navigation (mostly custom)
        // revealDefinition may work more often than goToImplementation
        //{ "before": [ "C-]" ], "commands": [ "editor.action.revealDefinition" ], "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
        { "before": [ "g", "d" ], "commands": [ "editor.action.revealDefinition" ], "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
        //{ "before": [ "g", "D" ], "commands": [ "editor.action.goToImplementation" ], "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor" },
        { "before": [ "g", "D" ], "after": [ "*", "g", "g", "n" ] },
        { "before": [ "g", "I" ], "commands": [ "references-view.findImplementations" ], "when": "editorHasReferenceProvider" },
        { "before": [ "g", "u" ], "commands": [ "editor.action.goToReferences" ], "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
        { "before": [ "g", "U" ], "commands": [ "references-view.find" ], "when": "editorHasReferenceProvider" },
        { "before": [ "g", "H" ], "commands": [ "editor.action.showDefinitionPreviewHover" ] },
        { "before": [ "g", "Leader", "h" ], "commands": [ "editor.action.peekDefinition" ], "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
        { "before": [ "g", "Leader", "H" ], "commands": [ "editor.action.peekImplementation" ], "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
        { "before": [ "g", "Leader", "Leader", "h" ], "commands": [ "editor.action.peekTypeDefinition" ] },

        // Things which surround plugin is supposed to do, but isn't doing
        //{ "before": [ "c", "s", "w", "`" ], "after": [ "e", "b", "i", "`", "<Escape>", "e", "a", "`", "<Escape>" ] },
        //{ "before": [ "c", "s", "w", "`" ], "after": [ "v", "i", "w", "S", "`" ] },
        { "before": [ "c", "s", "w" ], "after": [ "v", "i", "w", "S" ] },
        { "before": [ "c", "s", "W" ], "after": [ "v", "i", "W", "S" ] },

        // My custom keys
        //
        // Helpful links:
        // - https://code.visualstudio.com/api/references/when-clause-contexts
        //
        // As well as clearing the highlight, we also want Ctrl-L to hide any current popups
        // We tried "after": [ "S-Esc" ] and [ "S-Escape" ] but they didn't work.
        // So instead we list the commands directly (but there are many!)
        // Since clearSearchResults focuses the search window, I call focusActiveEditorGroup afterwards
        // To stop the highlighting of search text in the editor, "search.action.clearSearchResults" works, but it unhelpful if you later want to continue the search
        // What does work is unfocusing the search sidebar, which we do here with: "workbench.view.explorer", "workbench.action.focusActiveEditorGroup"
        // Unfortunately, if the sidebar was closed, this action will open it!
        // So we would like to create two rules, one if the sidebar is visible, and one if it is not
        // Unfortunately, it appears we cannot create two rules with the same "before", because the second rule appears to be overriding the first
        { "before": [ "C-L" ], "commands": [ ":nohlsearch", "closeAccessibilityHelp", "closeParameterHints", "closeReferenceSearch", "closeReferenceSearchEditor", "hideSuggestWidget", "workbench.action.closeQuickOpen", "workbench.view.explorer", "workbench.action.focusActiveEditorGroup" ], "when": "sideBarVisible" },
        // If the sidebar is not visible, then the search will also not be visible, solving the issue mentioned above
        // We could do this, but then we see the sidebar flicker visible and hidden again: "workbench.view.explorer", "workbench.action.focusActiveEditorGroup", "workbench.action.toggleSidebarVisibility"
        //{ "before": [ "C-L" ], "commands": [ ":nohlsearch", "closeAccessibilityHelp", "closeParameterHints", "closeReferenceSearch", "closeReferenceSearchEditor", "hideSuggestWidget", "workbench.action.closeQuickOpen" ], "when": "!sideBarVisible" },
        //
        // We save the current file in order to pin it.  We save all files, because that's what I really want Ctrl-S to do
        { "before": [ "<C-S>" ], "commands": [ "workbench.action.files.save", "workbench.action.files.saveAll", "workbench.action.focusActiveEditorGroup" ] },
        // I also put a C-S keybinding in keybindings.json, and that one worked well.
        // Select all
        { "before": [ "C-A" ], "after": [ "g", "g", "V", "G" ] },
        { "before": [ "C-J" ], "commands": [ "scrollLineDown", "scrollLineDown" ] },
        { "before": [ "C-K" ], "commands": [ "scrollLineUp", "scrollLineUp" ] },
        { "before": [ "<Leader>", "b", "d" ], "commands": [ "workbench.action.closeActiveEditor" ] },
        // This just opens a VSCode prompt for a URL, it doesn't actually open the hovered URL in a browser, which is what we want
        //{ "before": [ "g", "x" ], "commands": [ "workbench.action.url.openUrl" ] },
        { "before": [ "C-U" ], "commands": [ "workbench.action.openPreviousRecentlyUsedEditor" ] },
        // For Linux
        { "before": [ "C-S-J" ], "commands": [ "workbench.action.togglePanel" ] },
        //{ "before": [ "C-S-J" ] , "commands": [ "workbench.action.focusActiveEditorGroup" ] },
        // EasyMotion search character
        { "before": [ "C-D" ], "after": [ "leader", "leader", "s" ] },
        // EasyMotion start of word
        { "before": [ "C-G" ], "after": [ "leader", "leader", "leader", "b", "d", "w" ] },
        { "before": [ "C-W", "d" ], "commands": [ "workbench.action.closeActiveEditor" ] },
        { "before": [ "C-B", "d" ], "commands": [ "workbench.action.closeActiveEditor" ] },

        // My custom leader keybinds
        // Previously: "workbench.action.togglePanel" but this only works when the panel opens below the editor
        { "before": [ "<Leader>", "/" ], "commands": [ "workbench.action.findInFiles" ] },
        { "before": [ "<Leader>", "*" ], "after": [ "v", "i", "w" ], "commands": [ "workbench.action.findInFiles" ] },
        { "before": [ "<Leader>", "r" ], "commands": [ "editor.action.rename" ], "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
        { "before": [ "<Leader>", "R" ], "after": [ "v", "i", "w", "<Cmd-Alt-F>" ], "commands": [ "editor.action.startFindReplaceAction" ] },
        { "before": [ "<Leader>", "w" ], "commands": [ "editor.action.toggleWordWrap" ] },
        { "before": [ "<Leader>", "<Leader>", "r" ], "after": [ "v", "i", "w", "<Cmd-Alt-F>" ], "commands": [ "workbench.action.replaceInFiles" ] },
        { "before": [ "<Leader>", "a" ], "commands": [ "gitlens.toggleLineBlame" ] },
        { "before": [ "<Leader>", "A" ], "commands": [ "gitlens.toggleFileBlame" ] },
        // Git Shade
        //{ "before": [ "<Leader>", "g", "s" ], "commands": [ "gitlens.toggleFileHeatmap" ] },
        { "before": [ "<Leader>", "t" ], "commands": [ "workbench.action.gotoSymbol" ] },
        { "before": [ "<Leader>", "f" ], "commands": [ "workbench.action.toggleSidebarVisibility" ] },

        // JavaScript
        { "before": [ "<Leader>", "l", "o", "g" ], "after": [ "\"", "l", "y", "i", "w", "o", "c", "o", "n", "s", "o", "l", "e", ".", "l", "o", "g", "(", "\"", "C-R", "l", ":", "\"", ",", " ", "C-R", "l", ")", ";", "Esc" ] },
        { "before": [ "<Leader>", "L", "o", "g" ], "after": [ "\"", "l", "y", "i", "W", "o", "c", "o", "n", "s", "o", "l", "e", ".", "l", "o", "g", "(", "\"", "C-R", "l", ":", "\"", ",", " ", "C-R", "l", ")", ";", "Esc" ] },
        // Python
        { "before": [ "<Leader>", "p", "l", "o", "g" ], "after": [ "\"", "l", "y", "i", "w", "o", "p", "r", "i", "n", "t", "(", "\"", "C-R", "l", ":", "\"", ",", " ", "C-R", "l", ")", "Esc" ] },

        // For quick git work
        { "before": [ "<Leader>", "g", "c", "o" ], "commands": [ "git.checkout" ] },

        // We might want to move these into keybindings.json, so they work on all windows
        { "before": [ "<Leader>", "j" ], "commands": [ "workbench.action.togglePanel" ] },
        { "before": [ "<Leader>", "b", "d" ], "commands": [ "workbench.action.closeActiveEditor" ] },
        { "before": [ "<Leader>", "s" ], "commands": [ "workbench.action.openRecent" ] },

        // Toggle Inline Fold plugin (in Vim this actually toggles foldenable, i.e. all folding)
        { "before": [ "z", "i" ], "commands": [ "inlineFold.toggle" ] },
    ],
    "vim.visualModeKeyBindingsNonRecursive": [
        // For Linux: If we hit paste (Ctrl-V) when something is selected, replace the selection with the clipboard
        { "before": [ "C-V" ], "after": [ "s", "C-R", "+", "Esc" ] },
        // vim-unimpaired
        { "before": [ "]", "e" ], "commands": [ "editor.action.moveLinesDownAction" ] },
        { "before": [ "[", "e" ], "commands": [ "editor.action.moveLinesUpAction" ] },
        //
        { "before": [ "<Leader>", "*" ], "commands": [ "workbench.action.findInFiles" ] },
        // JavaScript
        { "before": [ "<Leader>", "l", "o", "g" ], "after": [ "\"", "l", "y", "o", "c", "o", "n", "s", "o", "l", "e", ".", "l", "o", "g", "(", "\"", "C-R", "l", ":", "\"", ",", " ", "C-R", "l", ")", ";", "Esc" ] },
        // Python
        { "before": [ "<Leader>", "p", "l", "o", "g" ], "after": [ "\"", "l", "y", "o", "p", "r", "i", "n", "t", "(", "\"", "C-R", "l", ":", "\"", ",", " ", "C-R", "l", ")", "Esc" ] },
    ],
    "vim.insertModeKeyBindingsNonRecursive": [
        // Unfortunately the = command can also affect other lines which are not highlighted.  Better not.
        //{ "before": [ "}" ], "after": [ "}", "<Esc>", "v", "a", "}", "=", "g", "v", "<Esc>" ], "when": "editTextFocus && !editorReadonly" },
    ],

    "vim.searchHighlightColor": "#0044bbaa",
    "vim.searchHighlightTextColor": "#ffffff",

    "vim.easymotionMarkerBackgroundColor": "#000",
    "vim.easymotionMarkerForegroundColorOneChar": "#ff0000",
    "vim.easymotionMarkerForegroundColorTwoCharFirst": "#ffb400",
    "vim.easymotionMarkerForegroundColorTwoCharSecond": "#ffb400",

    // For ZenTabs
    //"workbench.editor.enablePreviewFromQuickOpen": false,
    //"workbench.editor.enablePreview": false,
    "zentabs.maximumOpenedTabs": 8,
    "zentabs.applyLimitFor": "editorGroup",

    // For macros
    // We can execute these macros from keybindings.json
    "macros": {
        "commentLineAndMoveDown": [ "editor.action.commentLine", "cursorDown" ],
    },

    // https://medium.com/hack-visual-studio-code/toggle-any-setting-in-vs-code-using-keyboard-shortcut-arguments-cdb5ddc56955
    "settings.cycle": [
        {
            "id": "search.location",
            "values": [
                {
                    "search.location": "panel"
                },
                {
                    "search.location": "sidebar"
                }
            ]
        }
    ],

    // For Auto Close Tag
    // This will auto close tag when just typing </
    // See also bundled settings "*.autoClosingTags"
    // This adds support for JSX/TSX which do not have bundled support
    // Unfortunately the plugin tends to cause my editor to freeze up, so disabled for now
    // (Or it might be Auto Rename Tag that causes it, but I think it's actually this)
    // I think these features are now available natively in VSCode, e.g. "linked editing".
    "auto-close-tag.SublimeText3Mode": true,
    "auto-close-tag.enableAutoCloseTag": false,

    "files.exclude": {
        // These appeared when I started working in Java (and installed the recommended Java plugins)
        "**/.classpath": true,
        "**/.project": true,
        "**/.settings": true,
        "**/.factorypath": true
    },

    // VSCode keeps adding these.  I'm not sure what to do with them, so I'll just commit them for now.
    "editor.suggestSelection": "first",
    "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
    "editor.tabSize": 2,
    "editor.cursorStyle": "line",
    "editor.insertSpaces": false,
    "editor.lineNumbers": "on",
    "editor.wordSeparators": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?-",
    "editor.wordWrap": "off",

    // When using Ctrl-P to select a file, open with the same search that was used last time
    // This isn't helpful if you also use Ctrl-P to cycle through recently focused files
    //"workbench.quickOpen.preserveInput": true,

    // Stop asking me if I want to update go tools, just do it
    "go.toolsManagement.autoUpdate": true,
    "editor.suggest.preview": true,
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": true,
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": true,
    // blink, smooth, phase, expand, solid
    "editor.cursorBlinking": "blink",
    "debug.javascript.autoAttachFilter": "smart",
    "gitlens.plusFeatures.enabled": false,
    "html.autoCreateQuotes": false,
    "html.autoClosingTags": false,
    "errorLens.enabledDiagnosticLevels": [
        "info",
        "hint",
        "warning",
        "error"
    ],
    "trunk.trunkGrayOutNonBlockingIssues": false,
    "errorLens.enabled": true,

    "[python]": {
        "editor.formatOnType": true,
        "editor.defaultFormatter": "ms-python.python"
    },

    // Make some plugins faster
    // Note: This will however make the Vim plugin slower after modifying VSCode settings!
    // https://github.com/microsoft/vscode/issues/75627#issuecomment-1078827311
    "extensions.experimental.affinity": {
        "vscodevim.vim": 1,
        "asvetliakov.vscode-neovim": 1
    },

    // Set this false, if you do not want Codegeex to store the code it generates for you
    "Codegeex.Privacy": false,
    "docker.contexts.label": "Name",

    "svelte.enable-ts-plugin": true,
    "totalTypeScript.hideAllTips": true,
    "totalTypeScript.hideBasicTips": true,
    "chatgpt.verbosity": "normal",

    //"inlineFold.maskChar": "◦◦◦",
    //"inlineFold.maskChar": "---",
    "inlineFold.maskChar": "___",
    //"inlineFold.maskChar": "(_)",
    //"inlineFold.maskColor": "#68D7AC",
    "inlineFold.unfoldOnLineSelect": true,
    "inlineFold.autoFold": false,

    "workbench.iconTheme": "material-icon-theme",
    "material-icon-theme.activeIconPack": "react",
    "material-icon-theme.saturation": 0.8,

    // Show files before folders - unconventional, but it can make it easier to see which folder a file belongs to
    "explorer.sortOrder": "filesFirst",
    // Collapse all files in a folder, as long as that folder contains a README (especially useful for the root folder)
    "explorer.fileNesting.enabled": true,
    "explorer.fileNesting.patterns": {
        "README": "*",
        "README.*": "*",
        // Using both upper and lowercase is good on Linux, but breaks it on macOS (which probably matches both rules)
        //"readme.*": "*",
    },

    // I find these add clutter, and I never actually read them (at least not the statusbar info)
    // I use \a and \A instead when I want info
    "gitlens.codeLens.enabled": false,
    "gitlens.statusBar.enabled": false,

    // New Settings
    //"editor.guides.bracketPairsHorizontal": false,
    //"editor.guides.highlightActiveBracketPair": false,
}
