### Mac-like keybinds for linux

# # Installation
#
# Install `sxhkd` and `xautomation` (for the xte executable)
#
# Grab `run_if_window_matches` from here: https://github.com/baskerville/sxhkd/issues/123#issuecomment-453724972
#
# Add this to your `~/.bashrc`:
#
#     export SXHKD_TERMINALS_EREGEXP="(konsole|gnome-terminal|hyper)"
#
# Maybe add your favourite terminal too.  Cmd-C/V will send Ctrl-Shift-C/V to these windows.
#
# Load your new .bashrc:
#
#     source ~/.bashrc
#
# Start listening for these keys by running:
#
#     sxhkd &
#
# To automatically start it with X-windows on a systemd system, see here: https://wiki.archlinux.org/index.php/Sxhkd#Systemd_service_file
#
# Alternatively, add `sxhkd &` to your ~/.xinitrc

# Caveats:
#
# Holding down a key will not repeat it.
#
# We assume it is the left Alt, Shift and Control keys being pressed.  If you
# use the right Alt or Shift keys, these bindings will not release them
# properly.
#
# Notes:
#
# As you can see, we restore the original modifier keys after clearing them.
# That means a second stroke of the trigger key will trigger the action a
# second time.  But DO NOT try to restore the original non-modifier key; that
# will create an infinite loop!
#
# It also means, if you press and release a stroke very quickly, before the
# command has finished executing, then you may end up with a sticky modifier!
#
# All the keybinds work with Google Chrome, but with Firefox some of them don't
# work too well.  I believe Alt triggers the menu and that gets in the way.



# Reload this config
control + alt + shift + r
  killall -USR1 -u "$USER" sxhkd ; echo 'sxhkd config reloaded'



### === Cut, copy and paste === ###

alt + x
  xte "keyup x" "keyup Alt_L" "keydown Control_L" "key x" "keyup Control_L" "keydown Alt_L"
alt + c
  run_if_window_matches --not --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup c" "keyup Alt_L" "keydown Control_L"                   "key c"                 "keyup Control_L" "keydown Alt_L" ; \
  run_if_window_matches       --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup c" "keyup Alt_L" "keydown Control_L" "keydown Shift_L" "key c" "keyup Shift_L" "keyup Control_L" "keydown Alt_L"
alt + v
  run_if_window_matches --not --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup v" "keyup Alt_L" "keydown Control_L"                   "key v"                 "keyup Control_L" "keydown Alt_L" ; \
  run_if_window_matches       --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup v" "keyup Alt_L" "keydown Control_L" "keydown Shift_L" "key v" "keyup Shift_L" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"

# Failed attempt to paste into gvim
#alt + v
#  run_if_window_matches --not --class "($SXHKD_TERMINALS_EREGEXP|gvim)" -- xte "keyup v" "keyup Alt_L" "keydown Control_L"                   "key v"                 "keyup Control_L" "keydown Alt_L" ; \
#  run_if_window_matches       --class "(gvim)"                        -- xte "keyup v" "keyup Alt_L" "key Escape" "key i" "keydown Control_L" "key r" "keyup Control_L" "key plus" "keyup Control_L" "keydown Alt_L" ; \
#  run_if_window_matches       --class "$SXHKD_TERMINALS_EREGEXP"      -- xte "keyup v" "keyup Alt_L" "keydown Control_L" "keydown Shift_L" "key v" "keyup Shift_L" "keyup Control_L" "keydown Alt_L"



### === Manipulating windows === ###
# Note that alt + super + j is defined later, so it can do something different for Google Chrome
# We only want to set the size if the window is Vim, or GVim
# TODO: Or another editor, or a terminal hosting an editor
alt + super + k
 run_if_window_matches --not --class "(vim|gvim)" -- put_current_xwindow top ; \
 run_if_window_matches       --class "(vim|gvim)" -- eval unmaximize_current_xwindow --size 66% 81% && put_current_xwindow top
alt + super + h
 eval put_current_xwindow left_edge
alt + super + l
 eval put_current_xwindow right_edge


#alt + super + Left
#  put_current_xwindow tile_left
#alt + super + Right
#  put_current_xwindow tile_right
#alt + super + Up
#  put_current_xwindow tile_top
#alt + super + Down
#  put_current_xwindow tile_bottom


### === Common app keybinds === ###

# Zoom in and out
# Surprisingly the `alt + equal` mapping only works properly if I do `keyup plus`
# For Vim, instead of Ctrl-(plus|minus) my bindings are (Shift-plus|minus)
alt + equal
  run_if_window_matches --not --class "(vim|gvim)" -- xte "keyup plus"  "keyup Alt_L" "keydown Control_L" "key plus"  "keyup Control_L" "keydown Alt_L" ; \
  run_if_window_matches       --class "(vim|gvim)" -- xte "keyup plus"  "keyup Alt_L" "keydown Shift_L"   "key plus"  "keyup Shift_L"   "keydown Alt_L"
alt + minus
  run_if_window_matches --not --class "(vim|gvim)" -- xte "keyup minus" "keyup Alt_L" "keydown Control_L" "key minus" "keyup Control_L" "keydown Alt_L" ; \
  run_if_window_matches       --class "(vim|gvim)" -- xte "keyup minus" "keyup Alt_L"                     "key minus"                   "keydown Alt_L"
alt + 0
  run_if_window_matches --not --class "(vim|gvim)" -- xte "keyup 0"     "keyup Alt_L" "keydown Control_L" "key 0"     "keyup Control_L" "keydown Alt_L" ; \
  run_if_window_matches       --class "(vim|gvim)" -- xte "keyup 0"     "keyup Alt_L"                     "str :ZoomReset" "key Return" "keydown Alt_L"

# Open application preferences
alt + comma
  xte "keyup comma" "keyup Alt_L" "keydown Control_L" "key comma" "keyup Control_L" "keydown Alt_L"

# Close tab
alt + w
  run_if_window_matches --not --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup w" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key w" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L" ; \
  run_if_window_matches       --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup w" "keyup Alt_L" "keydown Control_L" "keydown Shift_L" "key w" "keyup Shift_L" "keyup Control_L" "keydown Alt_L"

# Close application
# This causes KDE to switch to virtual desktop 4!
#alt + q
#  xte "keyup q" "key F4"
# This causes KDE to switch to virtual desktop 4, and then act weird when we came back!
#alt + q
#  xte "keyup q" "keyup alt" "key F4" "keydown alt"
# So I have added Alt-Q and Meta-Q to KDE's KWin shortcuts



### === Common keybinds for browsers === ###

# Note that for alt-k strokes we send an extra "keydown Alt_L" "keyup Alt_L" both before and after the target stroke.
# The reason for this is because those strokes open Firefox's menu, and repeating them forces the menu to close again, and the intended stroke to register.
# They aren't strictly needed when Shift is held (that doesn't seem to trigger the menu)

# New tab, and reopen closed tab
alt + t
  run_if_window_matches --not --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup t" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key t" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L" ; \
  run_if_window_matches       --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup t" "keyup Alt_L" "keydown Control_L" "keydown Shift_L" "key t" "keyup Shift_L" "keyup Control_L" "keydown Alt_L"
alt + shift + t
  xte "keyup t" "keyup Alt_L" "keydown Control_L" "key t" "keyup Control_L" "keydown Alt_L"

# New window
alt + n
  xte "keyup n" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key n" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"

# Private browsing in Chrome
alt + shift + n
  xte "keyup n" "keyup Alt_L" "keydown Control_L" "key n" "keyup Control_L" "keydown Alt_L"

# Private browsing in Firefox
#alt + shift + p
#  xte "keyup p" "keyup Alt_L" "keydown Control_L" "key p" "keyup Control_L" "keydown Alt_L"

# Focus location bar
alt + l
  xte "keyup l" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key l" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"

# Reload page
alt + r
  xte "keyup r" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key r" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"

# Reload page, or rerun previous command
# I have since moved this to alt + shift + Return
#alt + r
#  run_if_window_matches       --class "(google-chrome|firefox)"  -- xte "keyup r" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key r" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L" ; \
#  run_if_window_matches       --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup r" "keyup Alt_L" "keyup Return" "key Up" "key Return" "keydown Alt_L" ; \
#  run_if_window_matches --not --class "(google-chrome|firefox|${SXHKD_TERMINALS_EREGEXP})" -- :
# In other apps, alt + r just does nothing!

# Reload without caching
alt + shift + r
  xte "keyup r" "keyup Alt_L" "keydown Control_L" "key r" "keyup Control_L" "keydown Alt_L"

# Make bookmark
alt + d
  xte "keyup d" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key d" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"

# View source
alt + u
  xte "keyup u" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key u" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"

# Toggle DevTools (Chrome)
# But I also use this to position windows
alt + super + j
  run_if_window_matches       --class "(google-chrome|firefox)" -- xte "keyup j" "keyup Alt_L" "keyup Super_L" "keydown Control_L" "keydown Shift_L" "key j" "keyup Shift_L" "keyup Control_L" "keydown Super_L" "keydown Alt_L" ; \
  run_if_window_matches --not --class "(google-chrome|firefox)" -- eval unmaximize_current_xwindow --size 78% 45% && put_current_xwindow bottom
alt + super + i
  xte "keyup i" "keyup Alt_L" "keyup Super_L" "keydown Control_L" "keydown Shift_L" "key i" "keyup Shift_L" "keyup Control_L" "keydown Super_L" "keydown Alt_L"

# On Alt-click (feels like Cmd-click) perform Control-click (e.g. to open a link in a separate tab).
# This works but it blocks Alt-hold-and-drag from doing its normal "move window".
# So I have disabled it.
#alt + @button1
#  xte "keyup Alt_L" "mouseup 1" "keydown Control_L" "mouseclick 1" "keyup Control_L" "keydown Alt_L"



### === VSCode === ###

# Make VSCode on Linux respond like WebStorm on macOS.  (Although I have already done most of that using VSCode's own config.)

# Format file (by selecting everything then running Format Selection)
#alt + shift + l
#  run_if_window_matches --not --class "(code|code-oss)" -- xte "keyup l" "keyup Alt_L" "keydown Control_L" "key l" "keyup Control_L" "keydown Alt_L" ; \
#  run_if_window_matches       --class "(code|code-oss)" -- xte "keyup l" "keyup Alt_L" "keyup Shift_L" "keydown Control_L" "key a" "key k" "key f" "keyup Control_L" "keydown Shift_L" "keydown Alt_L"

# Format with prettier (in VSCode send Ctrl-Shift-Alt-P, my rebind for editor.action.formatDocument)
alt + shift + l
  run_if_window_matches --not --class "(code|code-oss)" -- xte "keyup l" "keyup Alt_L" "keydown Control_L" "key l" "keyup Control_L" "keydown Alt_L" ; \
  run_if_window_matches       --class "(code|code-oss)" -- xte "keyup l" "keydown Control_L" "key l" "keyup Control_L"

# Format with prettier (in VSCode send Ctrl-Shift-Alt-P, my rebind for editor.action.formatDocument)
# Disabled now because I want it to perform quickOpenNavigatePreviousInFilePicker
#alt + shift + p
#  run_if_window_matches --not --class "(code|code-oss)" -- xte "keyup p" "keyup Alt_L" "keydown Control_L" "key p" "keyup Control_L" "keydown Alt_L" ; \
#  run_if_window_matches       --class "(code|code-oss)" -- xte "keyup p" "keydown Control_L" "key p" "keyup Control_L"

# When opening a search, start it immediately.  (More useful if we had already selected a word.)
# VSCode now does this itself
#alt + shift + f
#  run_if_window_matches --not --class "(code|code-oss)" -- xte "keyup f" "keyup Alt_L" "keydown Control_L" "key f" "keyup Control_L" "keydown Alt_L" ; \
#  run_if_window_matches       --class "(code|code-oss)" -- xte "keyup f" "keyup Alt_L" "keydown Control_L" "key f" "keyup Control_L" "keyup Shift_L" "key Return" "keydown Shift_L" "keydown Alt_L"



### === Map Cmd to Ctrl for entire alphabet === ###

# At this point it seems like I should just map the entire alphabet!
# Here are all the letters I didn't cover above:
# Select all text
alt + a
  xte "keyup a" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key a" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
alt + b
  xte "keyup b" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key b" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
alt + e
  xte "keyup e" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key e" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
# Find
alt + f
  xte "keyup f" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key f" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
# Repeat last find
alt + g
  xte "keyup g" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key g" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
alt + h
  xte "keyup h" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key h" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
alt + i
  xte "keyup i" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key i" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
# Although this is used in web browsers, I need to keep it clear for VSCode, to distinguish Ctrl-J (scroll down) from Alt-J (toggle panel)
#alt + j
#  xte "keyup j" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key j" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
alt + k
  xte "keyup k" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key k" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
alt + m
  xte "keyup m" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key m" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
# Print
# Although this is used in various apps, I need to keep it clear for VSCode
#alt + p
#  xte "keyup p" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key p" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
# Save
# Not playing nicely with VSCode, in any combination
#alt + s
#  xte "keyup s" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key s" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
# Redo (sometimes)
alt + y
  xte "keyup y" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key y" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
# Undo
alt + z
  xte "keyup z" "keyup Alt_L" "keydown Alt_L" "keyup Alt_L" "keydown Control_L" "key z" "keyup Control_L" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"

# Here we map Alt-Shift-key to Ctrl-Shift-key for the entire alphabet
# This attempt to do all the keys in one bind did not work:
#alt + shift + {a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}
#  xte "keyup "{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z} "keyup Alt_L" "keydown Control_L" "key "{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z} "keyup Control_L" "keydown Alt_L"
# So we do each key individually:
alt + shift + a
  xte "keyup a" "keyup Alt_L" "keydown Control_L" "key a" "keyup Control_L" "keydown Alt_L"
alt + shift + b
  xte "keyup b" "keyup Alt_L" "keydown Control_L" "key b" "keyup Control_L" "keydown Alt_L"
alt + shift + c
  xte "keyup c" "keyup Alt_L" "keydown Control_L" "key c" "keyup Control_L" "keydown Alt_L"
alt + shift + d
  xte "keyup d" "keyup Alt_L" "keydown Control_L" "key d" "keyup Control_L" "keydown Alt_L"
# This wasn't working as intended in VSCode, so I will let VSCode capture it specifically
#alt + shift + e
#  xte "keyup e" "keyup Alt_L" "keydown Control_L" "key e" "keyup Control_L" "keydown Alt_L"
# I like to use this in VSCode but the keybind gets sticky.  So now VSCode watched for the keybind itself.
#alt + shift + f
#  xte "keyup f" "keyup Alt_L" "keydown Control_L" "key f" "keyup Control_L" "keydown Alt_L"
alt + shift + g
  xte "keyup g" "keyup Alt_L" "keydown Control_L" "key g" "keyup Control_L" "keydown Alt_L"
alt + shift + h
  xte "keyup h" "keyup Alt_L" "keydown Control_L" "key h" "keyup Control_L" "keydown Alt_L"
alt + shift + i
  xte "keyup i" "keyup Alt_L" "keydown Control_L" "key i" "keyup Control_L" "keydown Alt_L"
#alt + shift + j
#  xte "keyup j" "keyup Alt_L" "keydown Control_L" "key j" "keyup Control_L" "keydown Alt_L"
# For Google Chrome, Cmd-Shift-J means "Open Downloads", which is Ctrl+J on Linux
alt + shift + j
  xte "keyup j" "keyup Alt_L" "keyup Shift_L" "keydown Control_L" "key j" "keyup Control_L" "keydown Shift_L" "keydown Alt_L"
alt + shift + k
  xte "keyup k" "keyup Alt_L" "keydown Control_L" "key k" "keyup Control_L" "keydown Alt_L"
#alt + shift + l
#  xte "keyup l" "keyup Alt_L" "keydown Control_L" "key l" "keyup Control_L" "keydown Alt_L"
alt + shift + m
  xte "keyup m" "keyup Alt_L" "keydown Control_L" "key m" "keyup Control_L" "keydown Alt_L"
alt + shift + n
  xte "keyup n" "keyup Alt_L" "keydown Control_L" "key n" "keyup Control_L" "keydown Alt_L"
alt + shift + o
  xte "keyup o" "keyup Alt_L" "keydown Control_L" "key o" "keyup Control_L" "keydown Alt_L"
#alt + shift + p
#  xte "keyup p" "keyup Alt_L" "keydown Control_L" "key p" "keyup Control_L" "keydown Alt_L"
alt + shift + q
  xte "keyup q" "keyup Alt_L" "keydown Control_L" "key q" "keyup Control_L" "keydown Alt_L"
alt + shift + r
  xte "keyup r" "keyup Alt_L" "keydown Control_L" "key r" "keyup Control_L" "keydown Alt_L"
alt + shift + s
  xte "keyup s" "keyup Alt_L" "keydown Control_L" "key s" "keyup Control_L" "keydown Alt_L"
alt + shift + t
  xte "keyup t" "keyup Alt_L" "keydown Control_L" "key t" "keyup Control_L" "keydown Alt_L"
alt + shift + u
  xte "keyup u" "keyup Alt_L" "keydown Control_L" "key u" "keyup Control_L" "keydown Alt_L"
alt + shift + v
  xte "keyup v" "keyup Alt_L" "keydown Control_L" "key v" "keyup Control_L" "keydown Alt_L"
alt + shift + w
  xte "keyup w" "keyup Alt_L" "keydown Control_L" "key w" "keyup Control_L" "keydown Alt_L"
alt + shift + x
  xte "keyup x" "keyup Alt_L" "keydown Control_L" "key x" "keyup Control_L" "keydown Alt_L"
alt + shift + y
  xte "keyup y" "keyup Alt_L" "keydown Control_L" "key y" "keyup Control_L" "keydown Alt_L"
# Redo
alt + shift + z
  xte "keyup z" "keyup Alt_L" "keydown Control_L" "key z" "keyup Control_L" "keydown Alt_L"



### === Navigation === ###

# Switch tab left/right
# Simple version which catches Alt-Shift-[/] and sends Ctrl-PageUp/PageDown
#alt + shift + braceleft
#  xte "keyup braceleft" "keyup Alt_L" "keyup Shift_L" "keydown Control_L" "key Prior" "keyup Control_L" "keydown Alt_L" "keydown Shift_L"
#alt + shift + braceright
#  xte "keyup braceright" "keyup Alt_L" "keyup Shift_L" "keydown Control_L" "key Next" "keyup Control_L" "keydown Alt_L" "keydown Shift_L"

# Switch tab left/right
# More complicated version which sends a different keystroke to Konsole applications (for my purposes Konsole listens for Ctrl-Shift-[/])
alt + shift + braceleft
  run_if_window_matches --not --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup braceleft"  "keyup Alt_L" "keyup Shift_L" "keydown Control_L" "key Prior"        "keyup Control_L" "keydown Alt_L" "keydown Shift_L" ; \
  run_if_window_matches       --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup braceleft"  "keyup Alt_L"                 "keydown Control_L" "key bracketleft"  "keyup Control_L" "keydown Alt_L"
alt + shift + braceright
  run_if_window_matches --not --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup braceright" "keyup Alt_L" "keyup Shift_L" "keydown Control_L" "key Next"         "keyup Control_L" "keydown Alt_L" "keydown Shift_L" ; \
  run_if_window_matches       --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup braceright" "keyup Alt_L"                 "keydown Control_L" "key bracketright" "keyup Control_L" "keydown Alt_L"

# Same thing for Ctrl-Win-Up/Down, to match laptop keypress Ctrl-Fn-Up/Down
# These aren't working.  I don't know why.  I think they should!
#ctrl + super + Up
#  xte "keyup Super_L" "key Prior" "keydown Super_L"
#ctrl + super + Down
#  xte "keyup Super_L" "key Next" "keydown Super_L"

# Go back/forward
# Cmd-Left and Cmd-Right usually navigate back and forwards on Mac.
# The equivalents on Linux are Alt+Left and Alt+Right.
# But I am mapping Alt+Left and Alt+Right below, as editing motions.
# Targetting them here would simply trigger those bindings!
# If you disable the editing keybinds below, then you could enable these.
alt + bracketleft
  xte "keyup bracketleft" "key Left"
alt + bracketright
  xte "keyup bracketright" "key Right"
# Ah, we can use Ctrl + bracketleft / bracketright, which perform navigation in Firefox (but not in Chrome)
#alt + bracketleft
#  xte "keyup bracketleft" "keyup Alt_L" "keydown Control_L" "key bracketleft" "keyup Control_L"
#alt + bracketright
#  xte "keyup bracketright" "keyup Alt_L" "keydown Control_L" "key bracketright" "keyup Control_L"

# Fortunately I already happen to be using a userscript called More Keybinds in my browser,
# which puts browser back on Control-Backspace and forward on Control-Enter.
# So I can target those strokes instead.
# https://openuserjs.org/scripts/joeytwiddle/More_Keybinds
# BUG: I cannot pass alt + bracketleft down to apps which actually understand it!
# So for VSCode I added ctrl+alt+shift bracketleft/right keybinds, so I can activate them here
#
# Disabled for now: Using the ones above
# Note: I can also use my "More Keybinds" userscript to detect these keystrokes directly in the browser
#
#alt + bracketleft
#  run_if_window_matches --class "(google-chrome|firefox)" -- xte "keyup bracketleft" "keyup Alt_L" "keydown Control_L" "key BackSpace" "keyup Control_L" "keydown Alt_L" ; \
#  run_if_window_matches --class "(code|code-oss)"         -- xte "keyup bracketleft" "keydown Control_L" "key bracketleft" "keyup Control_L"
#alt + bracketright
#  run_if_window_matches --class "(google-chrome|firefox)" -- xte "keyup bracketright" "keyup Alt_L" "keydown Control_L" "key Return" "keyup Control_L" "keydown Alt_L" ; \
#  run_if_window_matches --class "(code|code-oss)"         -- xte "keyup bracketright" "keydown Control_L" "key bracketright" "keyup Control_L"



### === Keys used while editing text === ###

# Move to home/end
# In the first two keybinds, I find it helps to send an _extra_ Alt press, to counteract the Alt press that the application receives when we release.
# Unfortunately Alt-Left and Alt-Right are the only way to get Back and Forward in some browsers, so we need to leave them alone
#alt + Left
#  xte "keyup Alt_L" "keyup Left"  "key Home" "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
#alt + Right
#  xte "keyup Alt_L" "keyup Right" "key End"  "keydown Alt_L" "keyup Alt_L" "keydown Alt_L"
alt + shift + Left
  xte "keyup Alt_L" "keyup Left"  "key Home" "keydown Alt_L"
alt + shift + Right
  xte "keyup Alt_L" "keyup Right" "key End"  "keydown Alt_L"

# Move one word
super + Left
  xte "keyup Super_L" "keyup Left"  "keydown Control_L" "key Left"  "keyup Control_L" "keydown Super_L"
super + Right
  xte "keyup Super_L" "keyup Right" "keydown Control_L" "key Right" "keyup Control_L" "keydown Super_L"
super + shift + Left
  xte "keyup Super_L" "keyup Left"  "keydown Control_L" "key Left"  "keyup Control_L" "keydown Super_L"
super + shift + Right
  xte "keyup Super_L" "keyup Right" "keydown Control_L" "key Right" "keyup Control_L" "keydown Super_L"

# On MacBooks, Fn-Backspace performs Delete
# On Linux, the same fingerstroke is at Ctrl-Backspace
# So let's map Ctrl-Backspace to perform Delete
# I do like to use Ctrl-Backspace as "Go Back" in More Keybinds, but now I have made that trigger on Delete too.
control + BackSpace
  xte "keyup BackSpace" "keyup Control_L" "key Delete" "keydown Control_L"
# I took the More Keybinds trigger off, because I don't like it.  Now Ctrl-Backspace does Delete in bash
# But this didn't work because there is no way to go back in browser that I haven't already broken!
#control + BackSpace
#  run_if_window_matches       --class "(google-chrome|firefox)" -- xte "keyup Control_L" "keyup BackSpace" "keydown Alt_L" "key Left" "keyup Alt_L" "keydown Control_L" ; \
#  run_if_window_matches --not --class "(google-chrome|firefox)" -- xte "keyup Control_L" "keyup BackSpace" "key Delete" "keydown Control_L"



### === Keybinds for me which you might want to disable === ###

# My keyboard has a Delete key where my fingers think Insert should be!
# I never actually use Insert, but sometimes I want to use Shift-Insert.
# Since I never use Shift-Delete, I can remap Shift-Delete to perform Shift-Insert.
shift + Delete
  xte "keyup Delete" "key Insert"

# My new Asus has moved the keys around, so I keep hitting Shift-PrintScreen by accident
shift + Print
  xte "keyup Print" "key Insert"

alt + KP_Divide
  volumedown

alt + KP_Multiply
  volumeup

super + KP_Divide
  volumedown

super + KP_Multiply
  volumeup

F11
  volumedown

F12
  volumeup

super + F2
  volumedown

super + F3
  volumeup

ctrl + alt + slash
  whatsplaying

ctrl + alt + period
  nextsong

ctrl + super + slash
  whatsplaying

ctrl + super + period
  nextsong

XF86AudioNext
  nextsong

# Problem with xsnapshot: captures both monitors; sometimes loses half of the window and captures things behind it
#super + c
#  xsnapshot
super + c
  spectacle -b -a



### === Special tricks === ###

# Magic Spacebar
control + shift + space
  cycle_space_bar_mappings

#control + shift + minus
  #cycle_space_bar_mappings

# Shift-Enter will re-execute the previous command
# BUG: I couldn't execute Shift-Enter on non-terminals when I needed to (e.g. to enter a new line in WhatsApp)
#shift + Return
#  run_if_window_matches --not --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup Return" "key Return" ; \
#  run_if_window_matches       --class "$SXHKD_TERMINALS_EREGEXP" -- xte "keyup Shift_L" "keyup Return" "key Up" "key Return" "keydown Shift_L"

# Ctrl-Shift-Enter will re-execute the previous command
#ctrl + shift + Return
#  xte "keyup Shift_L" "keyup Control_L" "keyup Return" "key Up" "key Return" "keydown Shift_L" "keydown Control_L"
# Unfortunately for some reason this didn't work with my CapsLock key (which I have mapped to Control_L)
# For the same reason, I did not define ctrl + alt + Return

# Actually for REPLs, I now prefer Alt-Shift-Enter, because the Enter helps to indicate the gravity of running a command
# Alt-Shift-Enter will re-execute the previous command
alt + shift + Return
  xte "keyup Shift_L" "keyup Alt_L" "keyup Return" "key Up" "key Return" "keydown Shift_L" "keydown Alt_L"

# This macOS user suggests Cmd-R: https://unix.stackexchange.com/questions/147563/how-do-i-repeat-the-last-command-without-using-the-arrow-keys
# We did try that above, in the browser section

# Get arrow keys from Super+IJKL
# These don't work, but I don't understand why not
#super + i
#  xte "keyup Super_L" "key Up" "keydown Super_L"
#super + j
#  xte "keyup Super_L" "key Left" "keydown Super_L"
#super + k
#  xte "keyup Super_L" "key Down" "keydown Super_L"
#super + l
#  xte "keyup Super_L" "key Right" "keydown Super_L"

# Most of these don't work because they are already bound to something by KDE
#super + w
#  xte "keyup Super_L" "key Up" "keydown Super_L"
#super + a
#  xte "keyup Super_L" "key Left" "keydown Super_L"
#super + s
#  xte "keyup Super_L" "key Down" "keydown Super_L"
#super + d
#  xte "keyup Super_L" "key Right" "keydown Super_L"

