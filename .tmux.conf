# vim: foldmethod=marker

# reload config
#bind-key r source-file ~/.tmux.conf
bind r source-file ~/.tmux.conf \; display-message "Config reloaded"

# Some colour inspiration: https://github.com/seebi/tmux-colors-solarized/blob/master/tmuxcolors-256.conf

# The following come from https://github.com/tony/tmux-config/blob/master/.tmux.conf {{{

# When we don't have 256 colors:
set-option -g status-bg blue
set-option -g status-fg colour136
set-option -g status-attr default
set-window-option -g window-status-fg black
set-window-option -g window-status-bg white
#set-window-option -g window-status-attr dim

# When we do have 256 colors:
set-option -g status-bg colour235
set-option -g status-fg colour136
set-option -g status-attr default
set-window-option -g window-status-bg colour237
set-window-option -g window-status-fg cyan
set-window-option -g window-status-fg white

#set-window-option -g window-status-bg blue
# Neither of these looked good on gnome-terminal:
#set-window-option -g window-status-fg cyan
#set-window-option -g window-status-fg black

#set-window-option -g window-status-fg black
#set-window-option -g window-status-bg white
#set-window-option -g window-status-fg white
#set-window-option -g window-status-bg black

# active window title colors
set-window-option -g window-status-current-fg blue
set-window-option -g window-status-current-bg white
set-window-option -g window-status-current-fg black
set-window-option -g window-status-current-bg green
set-window-option -g window-status-current-attr default

# Because white is brighter than green (and everything) I always felt intuitively when seeing both that white was the current window and the other background colour was the notification.  So now I switched to using those settings.
#set-window-option -g window-status-fg cyan
#set-window-option -g window-status-current-bg white

set-window-option -g window-status-fg cyan
set-window-option -g window-status-current-bg green

## None of this block works for me!
# Bell notification
#set window-status-bell-attr bright
#set window-status-bell-bg green
#set window-status-bell-fg white
# Content notification
#set window-status-content-attr bright
#set window-status-content-fg colour208
#set window-status-content-bg colour237
#set-window-option -g window-status-content-fg colour208
#set-window-option -g window-status-content-bg colour237
# Activity notification
#set window-status-activity-attr bright
#set window-status-activity-bg colour237
#set window-status-activity-fg colour208
# The indicator when one of the windows has output is always the reverse of the colours for inactive windows.
# (Although top's indicator was showing up red/black, perhaps because it had issued termcodes.)

# set window split
#bind-key v split-window -h
#bind-key b split-window
# I have now got used to the defaults, | and "

# pane border
# These make the pane border disappear in my xterms
#set-option -g pane-border-fg colour235 #base02
#set-option -g pane-active-border-fg colour240 #base01

# My xterm does not display block characters, possibly due to the font.
# Therefore it is no use for me to set different background and foreground colours for pane borders.
# As a result, I must set the active border background colour to be different from the normal border background colour.

# Furthermore, when TERM=xterm, higher numbered colours get quantised down to the nearest colour from the 16-colour palette.
# They do work if I explicitly export TERM=xterm-256color

# Dark blue and bright cyan.
# If I use the standard "blue" and "cyan" then gnome-terminal shows somewhat faded colours which are hard to distinguish.
#set -g pane-border-bg colour19
#set -g pane-border-fg magenta
#set -g pane-active-border-bg colour14
#set -g pane-active-border-fg red
set -g pane-border-bg colour19
set -g pane-border-fg colour19
set -g pane-active-border-bg green
set -g pane-active-border-fg green

# Green and orange (208 becomes red in 16-colour xterm)
#set -g pane-border-bg colour22
#set -g pane-border-fg colour22
#set -g pane-active-border-bg colour208
#set -g pane-active-border-fg colour208

# Subtle, dark and light grey.
#set -g pane-border-bg colour236
#set -g pane-border-fg colour236
#set -g pane-active-border-bg colour240
#set -g pane-active-border-fg colour240

# message text
set-option -g message-bg colour235 #base02
set-option -g message-fg colour166 #orange
# That comes out as red which is too dark
set-option -g message-bg black
set-option -g message-fg yellow

# pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange
# clock
set-window-option -g clock-mode-colour green #green

# Funky status line
# I could not find a way to configure the window title.  (Although it can be set by jsh's screentitle command, so xttitleprompt might do it for you.)
set -g status-interval 15
set -g status-justify centre # center align window list
set -g status-left-length 15
set -g status-right-length 140
set -g status-left '#[fg=cyan,bg=blue,bright]#{?client_prefix,[--PREFIX--],#H#[fg=white]v#[fg=cyan,bright]#(uname -r | sed "s|-.*||")} #[default]'
set -g status-right '#[fg=white,bg=blue] #(get_cpu_frequency) #(sed "s+ .*++" /proc/loadavg) #(get_cpu_temperature)°/#(get_gpu_temperature)° #[fg=cyan]#(get_power_stats -mini)#[default]'
# Pimped out with Braille Unicode characters
#set -g status-left '#[fg=cyan,bg=blue,bright]#H #[fg=colour235]⠙⢿#[default,fg=blue]⣷⣄#[default]'
#set -g status-right '#[default,fg=blue]⣠⣾#[fg=colour235,bg=blue]⡿⠋ #[fg=white]%a %e %b'
# Nice date: "Fri 18 Dec" #[fg=blue,bright]%a %e %b
# #(tmux-mem-cpu-load -i 1)
# #(cpufreq-info -f | sed "s+...$++")
# #(cat /proc/loadavg | takecols 1 | sed "s+\\.++;s+^0*++")%%

# Allow terminal codes to change the window title
set -g allow-rename on

# The title of the XTerm / gnome-terminal window
set-option -g set-titles on
set-option -g set-titles-string '[tmux] #T:#S #W' # user@host, session name, current window name

# C-b is not acceptable -- Vim uses it
#set-option -g prefix C-a
#bind-key C-a last-window

# Start numbering at 1
set -g base-index 1

# Allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
# Good for fullscreen programs, but bad for shells!
# With this on, if the other user passes through your window while cycling, the window you are working in may resize unexpectedly!
# With it off, it only resizes when a user attaches/detaches from the session, or resizes their terminal.
#setw -g aggressive-resize on

# Activity monitoring - highlight the titles of changed windows
setw -g monitor-activity on
# Activity monitoring - display a message when activity is detected
set -g visual-activity off

# Vi copypaste mode
set-window-option -g mode-keys vi
#bind-key -t vi-copy 'v' begin-selection
#bind-key -t vi-copy 'y' copy-selection

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Bring a pane from another window (must pass : for absolute window id)
# For example `<Prefix> + :2` will split the current window vertically, and bring window 2 into the lower pane
bind-key + command-prompt -p "join pane from:"  "join-pane -s '%%'"

# Disabled because + is used for join-pane and - is used for split-window -v
# Use JKLH instead
#bind-key - resize-pane -D 2
#bind-key + resize-pane -U 2
#bind-key / resize-pane -L 2
#bind-key * resize-pane -R 2

# set to main-horizontal, 60% height for main pane
bind m set-window-option main-pane-height 60\; select-layout main-horizontal

bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

# auto window rename
set-window-option -g automatic-rename
# Alternatively, turn it off, and use <prefix> , to give each window a useful task-based name.
#set-option -g allow-rename off

# rm mouse mode fail
#set -g mode-mouse off
# This might be desirable if we want to select text using the mouse without having to hold Shift

### These are commented because they may already be on by default
# Catch mouse clicks:
#set-option -g mouse-select-pane on
#set-option -g mouse-select-window on

# To get 256 colours in tmux, set TERM before running tmux:
#
#   TERM=screen-256color tmux
#
#     or
#
#   tmux -2
#
#     or
#
#   export TERM=xterm-256color
#   tmux

# This sets the value of $TERM for subshells, but not for tmux itself.  I have not yet found a use for it.
#set -g default-terminal "screen-256color"
#set -g default-terminal "xterm-256color"

# status bar
set-option -g status-utf8 on

# }}}



# Sane keys for pane splitting
# But `-` might not work if I am using it to resize panes below
#bind-key | split-window -h
#bind-key - split-window -v
#bind-key _ split-window -v

# https://github.com/edkolev/dots/blob/master/tmux.conf
# Updates for tmux 1.9's current pane splitting paths.
if-shell "[[ `tmux -V` == *1.9* ]]" 'unbind c; bind c new-window -c "#{pane_current_path}"'
if-shell "[[ `tmux -V` == *1.9* ]]" 'unbind s; bind s split-window -v -c "#{pane_current_path}"'
if-shell "[[ `tmux -V` == *1.9* ]]" "unbind '\"'; bind '\"' split-window -v -c '#{pane_current_path}'"
if-shell "[[ `tmux -V` == *1.9* ]]" 'unbind %; bind % split-window -h -c "#{pane_current_path}"'
if-shell "[[ `tmux -V` == *1.9* ]]" "unbind |; bind | split-window -h -c '#{pane_current_path}'"
if-shell "[[ `tmux -V` == *1.9* ]]" "unbind -; bind - split-window -v -c '#{pane_current_path}'"
if-shell "[[ `tmux -V` == *1.9* ]]" "unbind _; bind _ split-window -v -c '#{pane_current_path}'"
if-shell "[[ `tmux -V` == *1.9* ]]" 'unbind v; bind v split-window -h -c "#{pane_current_path}"'



# In Tmux 2.1, all the various mouse options were replaced by just one:
set -g mouse on

# Automatically enter tmux scrolling/copy mode when mouse scroll is sent to the terminal
# From: https://github.com/tmux/tmux/issues/145#issuecomment-150736967
# Sometimes this works and sometimes it doesn't
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

# Someone else wrote these, which will pass mouse wheel events through to the terminal if it looks like we are running Vim in this window.
#bind -n WheelUpPane if "[[ #{pane_current_command} =~ vim ]]" "select-pane -t = ; send-keys -M" "select-pane -t = ; send-keys Up"
#bind -n WheelDownPane if "[[ #{pane_current_command} =~ vim ]]" "select-pane -t = ; send-keys -M" "select-pane -t = ; send-keys Down"

# An easy way to enter scrolling/copy mode, with <Prefix> <Up>
# But surely we use <Prefix> <Arrows> for something else already
# Better to train ourselves to use <Prefix> <PageUp> or <Prefix> [
#bind-key Up copy-mode

# An easy way to enter scroll mode and start searching, with <Prefix> /
#bind-key / copy-mode \; send-key ?


# From https://justin.abrah.ms/dotfiles/tmux.html {{{

# Mouse features might be nice, but if any of them are enabled we must hold Shift in order to perform normal text selections.
# I am used to selecting text without holding Shift, and I rarely use the mouse features, so I sometimes want these disabled.
#
# Allows selection of text with the mouse.  This can then be pasted with <prefix> ]
# If the others are set then disabling this one will not bring back Shift-free selection in xterm, so may as well leave it on.
set-option -g mode-mouse on
# Allow mouse click to change pane
set-option -g mouse-select-pane on
# Allow mouse to drag pane borders to resize them
set-option -g mouse-resize-pane on
# Allow mouse click on status bar to select window
set-option -g mouse-select-window on

set-option -g bell-action none
set-option -g visual-bell on

# First windows is 1 (not the default 0)
set -g base-index 1

set -g history-limit 10000

bind-key S command-prompt -p ssh: "new-window -n %1 'ssh %1'"

# }}}



# From https://github.com/tonio/dotfiles/blob/master/.tmux.conf {{{

# (He also has vim-like keybinds for pane navigation and copy-mode which might be useful.)
# I was using < and > and - and +
# But < and > didn't work (probably because they are redefined later to swap windows)
# And - and + work differently depending whether your are in a lower or upper pane.

# By default, resize-pane is on <prefix> Meta-Up/Down/Left/Right
bind H resize-pane -L 5
bind L resize-pane -R 5
bind J resize-pane -D 5
bind K resize-pane -U 5

# Hit [prefix] Ctrl-W to give all panes the same size
bind-key ^w select-layout even-vertical
# Default: Hit [prefix] Space to cycle through different layouts
# Default bindings for different layouts are supposed to be on [prefix] Alt-1 to Alt-5, but these didn't work for me on macOS iTerm2

# }}}



# Added by Joey {{{

# The default prefix is Ctrl-b.  That is much nicer than screen's default Ctrl-a.

# We could change the prefix key to Ctrl-z
#set-option -g prefix C-z
#unbind-key C-b

# Use <Prefix> Ctrl-z to send the <Prefix> to an inner tmux.
#bind-key C-z send-prefix

# === Navigating windows ===
# I used to use these in screen, but I find myself wanting Ctrl-O too often in Vim.
#bind-key -n C-O select-window -t -1
#bind-key -n C-P select-window -t +1
# I also have these in screen.
#bind-key -n F8 select-window -t -1
#bind-key -n F9 select-window -t +1
# These did not work:
#bind-key -n C-S-O select-window -t -1
#bind-key -n C-S-P select-window -t +1
# These are nice for gnome-terminal, but don't work on xterm!
#bind-key -n M-C-O select-window -t -1
#bind-key -n M-C-P select-window -t +1
# Not recommended: C-[ interferes with <Esc>
# Like Mac.  Would be good except I made Fluxbox intercept them!
#bind-key -n M-S-[ select-window -t -1
#bind-key -n M-S-] select-window -t +1
# M-p worked but M-o did not (my Fluxbox config uses it)
#bind-key -n C-[ select-window -t -1
#bind-key -n C-] select-window -t +1
#bind-key -n C-S-Left swap-window -t -1
#bind-key -n C-S-Right swap-window -t +1
# Some terminals, e.g. KTerm I think, use Shift-arrows for switching tabs.  We can too!
# These work in XTerm and gnome-terminal.
bind-key -n S-Left select-window -t -1
bind-key -n S-Right select-window -t +1
#bind-key -n S-Up swap-window -t -1
#bind-key -n S-Down swap-window -t +1
# Also works in XTerm and gnome-terminal.
#bind-key -n C-S-Left select-window -t -1
#bind-key -n C-S-Right select-window -t +1
# Basic alternatives.
bind-key -n F5 select-window -t -1
bind-key -n F6 select-window -t +1
# These would be nice, but [ is the key to enter copy mode.
#bind-key [ select-window -t -1
#bind-key ] select-window -t +1

# === Moving windows ===
# If you want to move the current window to an empty spot, you can use <Prefix> . [number] <Enter>
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1
# Works in XTerm but NOT in gnome-terminal!
#bind-key -n C-S-Up swap-window -t -1
#bind-key -n C-S-Down swap-window -t +1
# These appear to be free.  Use the prefix before them.
# -r means the key may repeat.  Someone recommended this.
bind-key -r <   swap-window -t :-
bind-key -r >   swap-window -t :+
bind-key N      swap-window -t :-
bind-key P      swap-window -t :+
# TODO:     Ctrl-Shift-PageUp/Down might be suitable.
# CONSIDER: Ctrl-Shift-PageUp/Down might be suitable.

# This is not a good binding.  It stops Escape from working!
#bind-key -n C-[ swap-window -t +1

# The builtin <Prefix> . lets you renumber the current window.

# C-, and C-. did not work.
# S-Tab and C-Tab did not work.
bind-key Tab last-window
#bind-key Tab select-window -l

# To swap panes within a split, use the defaults:
#bind-key { swap-pane -U
#bind-key } swap-pane -D

# To swap two non-adjacent panes:
#   <prefix> q to list all the window ids
#   <prefix> :swap-pane -s 3 -t 5

# }}}



# From: http://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/
# Move between panes using Alt and arrows
#bind -n M-Left select-pane -L
#bind -n M-Right select-pane -R
#bind -n M-Up select-pane -U
#bind -n M-Down select-pane -D

# There are some example configs in this file: https://github.com/zevav/dotfiles/blob/master/tmux.conf
# And also these.
# Setup 'v' to begin selection as in Vim
#bind-key -t vi-copy v begin-selection
#bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
# Update default binding of `Enter` to also use copy-pipe
#unbind -t vi-copy Enter
#bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"



# From: http://unix.stackexchange.com/questions/15715/getting-tmux-to-copy-a-buffer-to-the-clipboard
# They recommended C-y and C-p but I went for C-c and C-v
# move tmux copy buffer into x clipboard
bind C-c run "tmux save-buffer - | xclip -i"
# move x clipboard into tmux paste buffer
bind C-v run "xclip -o | tmux load-buffer - ; tmux paste-buffer"

# For Mac OSX:
# put tmux buffer into x clipboard
bind C-c run-shell "tmux show-buffer | pbcopy"
# paste clipboard into tmux buffer
bind C-v run-shell "pbpaste | tmux load-buffer - ; tmux paste-buffer"
