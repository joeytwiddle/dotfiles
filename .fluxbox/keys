# For documnetation, see:
#
#   man fluxbox-keys
#
# It might be worth doing:
#
#   tail -f ~/.xsession_errors
#
# to get warnings about keybinds you create that Fluxbox cannot recognise.

! fluxbox-update_configs added '(workspace=[current])' to (Next|Prev)(Window|Group)
! check lines marked by 'FBCV13' if they are correctly updated
!mouse actions added by fluxbox-update_configs
## This removed by Joey cos it blocks the next
# OnTitlebar Move1 :MacroCmd {Focus} {Raise} {ActivateTab}
!mouse actions added by fluxbox-update_configs
## Either of these works
OnTitlebar Move1 :StartMoving
# OnTitlebar Mouse1 :StartMoving
OnLeftGrip Move1 :StartResizing BottomLeft
OnRightGrip Move1 :StartResizing BottomRight
OnWindowBorder Move1 :StartMoving

## Disable this next line for Homeworld!  And also kill xcape!
OnWindow Mod1 Mouse1 :MacroCmd {Raise} {Focus} {StartMoving}
OnWindow Mod1 Mouse3 :MacroCmd {Raise} {Focus} {StartResizing NearestCorner}
OnWindow Mod1 Mod4 Mouse3 :MacroCmd {Raise} {Focus} {StartResizing NearestCorner}
OnWindow Mod1 Mouse2 :MacroCmd {Raise} {Focus} {StartTabbing} {Lower}
# Workaround when Alt-Left-Drag is disabled:
OnWindow Mod4 Mouse1 :MacroCmd {Raise} {Focus} {StartMoving}

# OnTitlebar Mouse1 :MacroCmd {Focus} {Raise} {ActivateTab} {StartMoving}

### Some older defaults:
# !mouse actions added by fluxbox-update_configs
# OnTitlebar Mouse2 :StartTabbing
# 
# !mouse actions added by fluxbox-update_configs
# OnTitlebar Double Mouse1 :Shade
# OnTitlebar Mouse3 :WindowMenu
# 
# !mouse actions added by fluxbox-update_configs
# OnWindow Mod1 Mouse1 :MacroCmd {Raise} {Focus} {StartMoving}
# OnWindow Mod1 Mouse3 :MacroCmd {Raise} {Focus} {StartResizing NearestCorner}
# 
# !mouse actions added by fluxbox-update_configs
# OnToolbar Mouse4 :NextWorkspace
# OnToolbar Mouse5 :PrevWorkspace
# 
# !mouse actions added by fluxbox-update_configs
# OnDesktop Mouse1 :HideMenus
# OnDesktop Mouse2 :WorkspaceMenu
# OnDesktop Mouse3 :RootMenu
# OnDesktop Mouse4 :NextWorkspace
# OnDesktop Mouse5 :PrevWorkspace
# 
# !mouse actions added by fluxbox-update_configs
# OnTitlebar Mouse2 :StartTabbing
# 
# !mouse actions added by fluxbox-update_configs
# OnTitlebar Double Mouse1 :Shade
# OnTitlebar Mouse3 :WindowMenu
# 
# !mouse actions added by fluxbox-update_configs
# OnWindow Mod1 Mouse1 :MacroCmd {Raise} {Focus} {StartMoving}
# OnWindow Mod1 Mouse3 :MacroCmd {Raise} {Focus} {StartResizing NearestCorner}
# 
# !mouse actions added by fluxbox-update_configs
# OnToolbar Mouse4 :NextWorkspace
# OnToolbar Mouse5 :PrevWorkspace
# 
# !mouse actions added by fluxbox-update_configs
# OnDesktop Mouse1 :HideMenus
# OnDesktop Mouse2 :WorkspaceMenu
# OnDesktop Mouse3 :RootMenu
# OnDesktop Mouse4 :NextWorkspace
# OnDesktop Mouse5 :PrevWorkspace



## Joey's keybindings for Fluxbox, some of which require jsh scripts
## Mod1 is Alt - some people might be annoyed if they want to access application
## menus.  Mod4 is Win key.  That's where most people will want the extra
## commands provided here.  But I myself moved a lot of them onto Alt, since it
## is easier for my thumb, and I use them more often than I use app menus.

## Note: You were having problems with some actions happening before others.
## It might be possible to solve this using {Delay {Command...} 1}

## Move between windows (window cycling)
## Disable these to use bbkey's for switching instead (it has a nice menu).  bbkeys may need restarting after reconfiguring fluxbox!
## Sometimes I disable some of them so they are not captured by Fluxbox and can be passed through xvncviewer
### ==OLD== broken versions which worked in earlier versions of fluxbox:
## Bug: ignores window groupings.
## Bug: Fluxbox currently has the bug that Alt-Tab sometimes skips N windows which Alt-grave finds.
## Bug: Damnit now fluxbox has gone completely mad!  It cycles a few windows, on various workspaces!
## Done: OK fluxbox has got better, using the commands below.
# Mod1 Tab :NextWindow {groups}
# Mod1 grave :PrevWindow {groups}
# Mod4 Tab :NextWindow 0
# Mod4 grave :PrevWindow 0
### ==NEW== Fixed versions!
Mod1 Tab :NextWindow {groups} (Workspace=[current])
Mod1 grave :PrevWindow {groups} (Workspace=[current])
#Mod4 Tab :NextWindow {groups}
#Mod4 grave :PrevWindow {groups}
# Experiment: Always change workspace when using Super-Tab.
# Disadvantage: If you start on Workspace 2, refuses to cycle windows on Workspace 1, which you might want to do if the first window focused is not the one you wanted.  It seems to miss windows from the list; my theory is that it skips windows on the same desktop which are next to each other in the list, except for the first one in the group.  Ideally we only want to skip windows which were on the *initial* workspace, rather than windows which are on the current workspace.
Mod4 Tab :NextWindow {groups} (Workspace!=[current])
Mod4 grave :PrevWindow {groups} (Workspace!=[current])

## Cycle through windows of the same type as the current one (like Cmd-grave on Mac OS X)
Mod1 Shift Tab   :NextWindow {groups} (Workspace=[current]) (Name=[current])
Mod1 Shift grave :PrevWindow {groups} (Workspace=[current]) (Name=[current])
Mod4 Shift Tab   :NextWindow {groups} (Workspace!=[current]) (Name=[current])
Mod4 Shift grave :PrevWindow {groups} (Workspace!=[current]) (Name=[current])

# Cycle through editors
#Mod1 Control e :NextWindow {groups} (Name=gvim)
# Matches the rather odd title I use for my Vim windows
Mod1 Control e :NextWindow {groups} (Title=.* \(  .*  \) .*)
# Cycle through terminals (which don't have editors inside them)
Mod1 Control t :NextWindow {groups} (Name=xterm) (Title!=.* \(  .*  \) .*)
# Cycle through web browsers
Mod1 Control b :NextWindow {groups} (Name=google-chrome)

#Mod1 Escape :ExecCommand {skippy-xd}

## We can make the same key act differently on different windows:
# Mod4 z :If {Matches (Title=.*VIM)} {MaximizeVertical} {If {Matches (Name=xterm)} {MaximizeHorizontal} {MaximizeWindow}}

## Move between windows using a Window List Menu
# Control Tab :ClientMenu (Workspace=[current])
# Control grave :ClientMenu
# Control Tab :ClientMenu
# Control grave :ClientMenu (Class=[current])
# Mod4 Tab :ClientMenu (Workspace!=[current])
# Mod1 1 :ClientMenu
# Mod4 Up :PrevWindow {groups} (stuck=no) (shaded=no)
# Mod1 Up :PrevWindow {groups} (stuck=no) (shaded=no)
# Mod4 Down :NextWindow {groups} (stuck=no) (shaded=no)
# Mod1 Down :NextWindow {groups} (stuck=no) (shaded=no)

## Tabbing with Middle button:
OnTitlebar Mouse2 :MacroCmd {Focus} {StartTabbing} {Lower}
## These two don't work (but are inteded to avoid the lowering):
OnTitlebar Mod1 Mouse2 :MacroCmd {Focus} {StartTabbing}
OnTitlebar Mod4 Mouse2 :MacroCmd {Focus} {StartTabbing}

## I had this for years:
Control Mod1 r :Reconfigure
Control Mod4 r :Restart
## But for some reason these days, my fingers gravitate towards:
Shift Mod1 r :Reconfigure
Shift Mod4 r :Restart
#Control Mod1 q :Exit
## Allows you to run Fluxbox commands:
Control Shift F2 :CommandDialog

# OnTitlebar Mouse2 :StartTabbing
# OnTitlebar Double Mouse1 :Shade
# OnTitlebar Mouse3 :WindowMenu
# OnWindow Mod1 Mouse3 :MacroCmd {Raise} {Focus} {StartResizing BottomRight}
# OnDesktop Mouse1 :hideMenus
# OnDesktop Mouse2 :workspaceMenu
# OnDesktop Mouse3 :rootMenu

## I had to disable the following because of a small disaster with two-finger scrolling.
## Basically I am sometimes tempted to flick-scroll the browser page back to the top, and then before it stops, go and switch to a different desktop or window.
## But my two-finger scroller will continue sending button 4/5 (mousewheel) events, and not necessarily to the original window!
## - If I happen to press Alt (Mod1) for any reason, Fluxbox will receive Mod1 Mouse4, and change workspace!
## - If I happen to move my mouse over the desktop or toolbar, Fluxbox will detect OnDesktop Mouse4, and change workspace!
## This is still happening even with the latest touchpad driver.
## Therefore I have disabled mousewheel to change desktop for the moment.
## But perhaps it could be reintroduced with less common modifiers, e.g. Mod1-Mod4 or Ctrl-Alt-Shift.

### Change desktop with mousewheel on wallpaper
### These next two are really no fun when you have a scrollbar on your laptop's mousepad!
##OnDesktop Mouse4 :PrevWorkspace
##OnDesktop Mouse5 :NextWorkspace
#OnDesktop Mod1 Mouse4 :PrevWorkspace
#OnDesktop Mod1 Mouse5 :NextWorkspace
#OnDesktop Shift Mouse4 :PrevWorkspace 3
#OnDesktop Shift Mouse5 :NextWorkspace 3
#OnDesktop Mod4 Mouse4 :PrevWorkspace 3
#OnDesktop Mod4 Mouse5 :NextWorkspace 3
#
### Or, to go alongside my compiz binds:
Mod1 Mouse4 :PrevWorkspace
Mod1 Mouse5 :NextWorkspace
### Disabled for now, so that we can fake mousewheel up/down with Mod4 Up/Down.
### If we don't disable this, `Mod4 Down` triggers Mouse5 but with Mod4 set that becomes `Mod4 Mouse5` which is intercepted here!
Mod4 Mouse4 :PrevWorkspace 3
Mod4 Mouse5 :NextWorkspace 3
#Shift Mod1 Mouse4 :PrevWorkspace 3
#Shift Mod1 Mouse5 :NextWorkspace 3
#Control Mod1 Mouse4 :PrevWorkspace 3
#Control Mod1 Mouse5 :NextWorkspace 3
#
OnToolbar Mouse4 :PrevWorkspace
OnToolbar Mouse5 :NextWorkspace

## Sometimes brings the window back to the front again after (due to focus?)
OnTitlebar Double Mouse1 :Lower
# OnTitlebar Double Mouse1 :MacroCmd {Lower}
## Sometimes bring iconified windows up!
# OnTitlebar Double Mouse1 :MacroCmd {Lower} {PrevWindow {groups}}
# OnTitlebar Double Mouse1 :MacroCmd {Lower} {PrevWindow {groups} (stuck=no) (shaded=no) (minimized=no)}
# OnTitlebar Mouse2 :Lower
## When I don't have a middle mouse button, I rather have tabbing than shade.
#OnTitlebar Mouse3 :StartTabbing
OnTitlebar Mouse3 :Shade
# OnTitlebar Double Mouse3 :WindowMenu
# OnTitlebar Mod1 Mouse3 :WindowMenu
OnTitlebar Control Mouse3 :WindowMenu
OnTitlebar Mod1 Control Mouse3 :WindowMenu
## Too easy to do by accident, wrt significant change:
# OnTitlebar Mouse4 :TakeToPrevWorkspace
# OnTitlebar Mouse5 :TakeToNextWorkspace
OnTitlebar Mouse4 :MacroCmd {Lower}
# OnTitlebar Mouse4 :ToggleCmd {Lower} {Raise}
# OnTitlebar Mouse5 :MacroCmd {ShadeWindow}
OnTitlebar Mouse5 :MacroCmd {ShadeWindow} {Raise}

OnDesktop Mouse1 :hideMenus
OnDesktop Mouse2 :workspaceMenu
## I think this might be opening while I am playing UT in wine, but I'm not sure why.
# OnDesktop Mouse3 :rootMenu
## So for now, we must hold Control to get the menu.
OnDesktop Control Mouse3 :rootMenu

## The Lower works but the StartTabbing does not.
# Mod1 t :MacroCmd {Raise} {Focus} {StartTabbing} {Lower}
# Mod4 t :StartTabbing

## Currently moves all windows on all desktops!
# Shift Control Mod1 Left :MacroCmd {ForEach {SendToPrevWorkspace 1}} {PrevWorkspace}
# Shift Control Mod1 Right :MacroCmd {ForEach {SendToNextWorkspace 1}} {NextWorkspace}
# Shift Control Mod1 Up :MacroCmd {ForEach {SendToPrevWorkspace 3}} {PrevWorkspace}
# Shift Control Mod1 Down :MacroCmd {ForEach {SendToNextWorkspace 3}} {NextWorkspace}

## According to Hwi's xev, my key "Alt Gr" is Mode_switch, "Win right" is Multi_key, followed by Menu and Control_R

Control Escape :RootMenu

## Move between tabs
Mod1 Left :PrevTab
Mod1 Right :NextTab
# Control Tab :PrevTab
# Control grave :NextTab
# Control Shift Tab :NextTab
## Like Mac OSX:
## But last I saw it was braceleft not bracketleft
#Mod1 Shift     bracketleft     :PrevTab
#Mod1 Shift     bracketright     :NextTab
## Move current tab around
## Disabled to make Mod4 Left/Right free for mousewheel simulation
#Mod4 Left :MoveTabLeft
#Mod4 Right :MoveTabRight
Mod1 Shift Left :MoveTabLeft
Mod1 Shift Right :MoveTabRight
## not working:
# Mod1 braceleft :MovePrevTab
# Mod4 braceleft :MovePrevTab
# Mod1 braceright :MoveNextTab
# Mod4 braceright :MoveNextTab
## This is like what a Mac has:
#Mod1 Shift braceleft  :PrevTab
#Mod1 Shift braceright :NextTab
## Moved over by one key:
#Mod4 Shift braceleft  :PrevTab
#Mod4 Shift braceright :NextTab
Mod1 Shift h :PrevTab
Mod1 Shift l :NextTab
Control Mod1 braceleft  :PrevTab
Control Mod1 braceright :NextTab
Mod4 Shift braceleft    :PrevTab
Mod4 Shift braceright   :NextTab

## Do things to windows
# Mod1 c :Close
# Mod4 c :Close
Mod1 F4 :Close
Mod1 q :Close
Mod4 q :KillWindow
Mod4 Shift q :ExecCommand xkill
# Mod1 a :Lower
## None of these do the magic I wanted (FB 1.3.2-4)
#Mod1 a :MacroCmd {Lower} {Focus}
# Mod1 a :MacroCmd {Lower} {Activate}
# Mod1 a :MacroCmd {Lower} {ActivateTab} {Raise}
# Mod1 a :MacroCmd {Lower} {Reconfig}
Mod4 a :Lower
#Mod1 d :ShadeWindow
Mod4 d :ShadeWindow
#Mod1 o :DetachClient
Mod4 o :DetachClient
# Mod1 s :StickWindow
#Mod1 s :StickWindow {groups} (shaded=no)
Mod4 s :StickWindow {groups} (shaded=no)
# To do this from the cmdline: wmctrl -i -r $(xdotool getwindowfocus) -b toggle,sticky
#Mod1 i :Minimize
Mod4 i :Minimize
#Mod1 z :MaximizeWindow
Mod4 z :MaximizeWindow
## Like Mac OSX "Grow"
Mod1 Mod4 equal :MaximizeWindow
## Strangely my Chromium ignores this (it captures the keypress)
# Mod1 Enter :Fullscreen
# Mod1 Enter :MacroCmd {ToggleDecor} {MaximizeWindow}
## But it works fine on these different keybindings:
#Mod1 Shift z :Fullscreen
#Mod1 Shift f :Fullscreen
#Mod1 v :MaximizeVertical
Mod4 v :MaximizeVertical
#Mod1 h :MaximizeHorizontal
Mod4 h :MaximizeHorizontal
#Mod1 f :ToggleDecor
Mod4 f :ToggleDecor
# Mod1 t :ToggleTab
# Mod4 t :ToggleTab
## Temporarily force a window to the top layer
Mod4 t :ToggleCmd {SetLayer Top} {SetLayer Normal}

Mod1 F9 :ExecCommand xsnapshot
Mod4 F9 :ExecCommand xsnapshot
Control F9 :ExecCommand xsnapshot -window
Mod1 Shift 4 :ExecCommand xsnapshot -window

## Run top in an xterm to peek on the system and processes
Mod1 t :ExecCommand xtermbg -bg '#330000' -geometry 132x28 -e top -c -n 100

## Changing workspace
## These settings make sense if you have three columns of desktops
Control Mod1 Left :PrevWorkspace
Control Mod1 Right :NextWorkspace
Control Mod1 Up :PrevWorkspace 3
Control Mod1 Down :NextWorkspace 3
Control Mod1 A :PrevWorkspace
Control Mod1 D :NextWorkspace
Control Mod1 W :PrevWorkspace 3
Control Mod1 S :NextWorkspace 3
Shift Mod4 Left :TakeToPrevWorkspace
Shift Mod4 Right :TakeToNextWorkspace
Shift Mod4 Up :TakeToPrevWorkspace 3
Shift Mod4 Down :TakeToNextWorkspace 3
## Slower; I was only using them for debugging.
#Control Mod1 H :ExecCommand wmctrl_emulate_fluxbox_command :PrevWorkspace
#Control Mod1 L :ExecCommand wmctrl_emulate_fluxbox_command :NextWorkspace
#Control Mod1 K :ExecCommand wmctrl_emulate_fluxbox_command :PrevWorkspace 3
#Control Mod1 J :ExecCommand wmctrl_emulate_fluxbox_command :NextWorkspace 3
Control Mod1 H :PrevWorkspace
Control Mod1 L :NextWorkspace
Control Mod1 K :PrevWorkspace 3
Control Mod1 J :NextWorkspace 3

## Or, one handed on right-hand side:
## --- NOT WORKING ---
## *** DO NOT CURRENTLY WORK ***
#RControl Left  :PrevWorkspace
#RControl Right :NextWorkspace
#RControl Up    :PrevWorkspace 3
#RControl Down  :NextWorkspace 3

## Firefox uses these to select tabs by position
#Mod1 1 :Workspace 1
#Mod1 2 :Workspace 2
#Mod1 3 :Workspace 3

## Known bug with NextWorkspace: it wastes the next keyboard input in an annoying way!
## http://sourceforge.net/tracker/?func=detail&aid=3190205&group_id=35398&atid=413960
## So we try this workaround, but it is pretty slow.  I think the original bug was better!
## (20111210: I may have sped it up a bit by linking the script into ~/bin.)
## (2012/13: The devs fixed the bug!)
#Control Mod4 Left  :ExecCommand wmctrl_emulate_fluxbox_command :PrevWorkspace
#Control Mod4 Right :ExecCommand wmctrl_emulate_fluxbox_command :NextWorkspace
#Control Mod4 Up    :ExecCommand wmctrl_emulate_fluxbox_command :PrevWorkspace       3
#Control Mod4 Down  :ExecCommand wmctrl_emulate_fluxbox_command :NextWorkspace       3
#Mod4 Shift Left    :ExecCommand wmctrl_emulate_fluxbox_command :TakeToPrevWorkspace
#Mod4 Shift Right   :ExecCommand wmctrl_emulate_fluxbox_command :TakeToNextWorkspace
#Mod4 Shift Up      :ExecCommand wmctrl_emulate_fluxbox_command :TakeToPrevWorkspace 3
#Mod4 Shift Down    :ExecCommand wmctrl_emulate_fluxbox_command :TakeToNextWorkspace 3
#Control Mod4 H     :ExecCommand wmctrl_emulate_fluxbox_command :PrevWorkspace
#Control Mod4 L     :ExecCommand wmctrl_emulate_fluxbox_command :NextWorkspace
#Control Mod4 K     :ExecCommand wmctrl_emulate_fluxbox_command :PrevWorkspace       3
#Control Mod4 J     :ExecCommand wmctrl_emulate_fluxbox_command :NextWorkspace       3

# Swap all windows between two workspaces
#Control Mod4 Shift Left :ExecCommand move_windows_between_desktops swapdesktops left
#Control Mod4 Shift Right :ExecCommand move_windows_between_desktops swapdesktops right
#Control Mod4 Shift Up :ExecCommand move_windows_between_desktops swapdesktops up
#Control Mod4 Shift Down :ExecCommand move_windows_between_desktops swapdesktops down
Control Mod1 Shift Left :ExecCommand move_windows_between_desktops swapdesktops left
Control Mod1 Shift Right :ExecCommand move_windows_between_desktops swapdesktops right
Control Mod1 Shift Up :ExecCommand move_windows_between_desktops swapdesktops up
Control Mod1 Shift Down :ExecCommand move_windows_between_desktops swapdesktops down
# I wanted to bind these to Control Mod1 Shift but for some strange reason that:
#   1. didn't work, and
#   2. over an un-tabbed xterm, changed the size of the xterm!

Control Mod1 1 :Workspace 1
Control Mod1 2 :Workspace 2
Control Mod1 3 :Workspace 3
Control Mod1 4 :Workspace 4
Control Mod1 5 :Workspace 5
Control Mod1 6 :Workspace 6
Control Mod1 7 :Workspace 7
Control Mod1 8 :Workspace 8
# Mod4 F1 :Workspace 1
# Mod4 F2 :Workspace 2
# Mod4 F3 :Workspace 3
# Mod4 F4 :Workspace 4
# Mod4 F5 :Workspace 5
# Mod4 F6 :Workspace 6
# Mod4 F7 :Workspace 7
# Mod4 F8 :Workspace 8

### Moving windows
## Gnome-style not working:
# Control KP_Right :NudgeRight
# Control KP_Left :NudgeLeft
# Control KP_Down :NudgeDown
# Control KP_Up :NudgeUp
# Mod1 KP_Right :BigNudgeRight
# Mod4 KP_Right :BigNudgeRight
# Mod1 KP_Left :BigNudgeLeft
# Mod4 KP_Left :BigNudgeLeft
# Mod1 KP_Down :BigNudgeDown
# Mod4 KP_Down :BigNudgeDown
# Mod1 KP_Up :BigNudgeUp
# Mod4 KP_Up :BigNudgeUp
## Fluxbox-style:
## Move windows around with Ctrl-Alt-KeypadArrows
Control Mod1 KP_Right :MoveRight +25
Control Mod1 KP_Left :MoveRight -25
Control Mod1 KP_Up :MoveUp +25
Control Mod1 KP_Down :MoveUp -25
# Mod4 KP_Right :MoveRight +8
# Mod4 KP_Left :MoveRight -8
# Mod4 KP_Up :MoveUp +8
# Mod4 KP_Down :MoveUp -8
## Move all windows together - this can be useful to recover after wm restarts and they have all shifted a little bit out of place.
## DONE: Seems to work double/triple/etc. on groups of tags - should do for each group not for each tab.
# Shift Control Right :ForEach {MoveRight +4} {{groups}}
# Shift Control Left :ForEach {MoveRight -4} {{groups}}
# Shift Control Up :ForEach {MoveUp +4} {{groups}}
# Shift Control Down :ForEach {MoveUp -4} {{groups}}
## Fix problems where everything on the screen has translated by the same amount (e.g. fallen down 12 pixels).
## by large amouts with Control Shift
Control Shift KP_Right :ForEach {MoveRight +4} {{groups}}
Control Shift KP_Left :ForEach {MoveRight -4} {{groups}}
Control Shift KP_Up :ForEach {MoveUp +4} {{groups}}
Control Shift KP_Down :ForEach {MoveUp -4} {{groups}}
Control Mod4 Shift Right :ForEach {MoveRight +4} {{groups}}
Control Mod4 Shift Left :ForEach {MoveRight -4} {{groups}}
Control Mod4 Shift Up :ForEach {MoveUp +4} {{groups}}
Control Mod4 Shift Down :ForEach {MoveUp -4} {{groups}}
## by small amouts with Control Win
Control Mod4 KP_Right :ForEach {MoveRight +1} {{groups}}
Control Mod4 KP_Left :ForEach {MoveRight -1} {{groups}}
Control Mod4 KP_Up :ForEach {MoveUp +1} {{groups}}
Control Mod4 KP_Down :ForEach {MoveUp -1} {{groups}}
## I notice Ctrl-Alt-H/J/K/L are moving 1 pixel.  I guess these must be defaults.

## Resizing windows
# Mod1 KP_5 :VerticalDecrement
# Mod4 KP_5 :HorizontalDecrement
# Mod4 KP_Divide :HorizontalDecrement
# Mod4 KP_Multiply :HorizontalIncrement
# Mod4 KP_Subtract :VerticalDecrement
# Mod4 KP_Add :VerticalIncrement
## These values could be larger if it wasn't for XTerm, which interprets +/-N as characters not pixels.
Mod4 KP_Multiply :Resize +8 0
Mod4 KP_Divide :Resize -8 0
Mod4 KP_Add :Resize 0 +8
Mod4 KP_Subtract :Resize 0 -8
Mod1 Mod4 End :Resize +8 0
Mod1 Mod4 Home :Resize -8 0
Mod1 Mod4 Next :Resize 0 +8
Mod1 Mod4 Prior :Resize 0 -8

# PageUp=Prior PageDown=Next

Mod1 F2 :ExecCommand runacommand

## Audio
Mod1 KP_Multiply :ExecCommand SHOW_VOLUME=1 volumeup 9
Mod1 KP_Divide   :ExecCommand SHOW_VOLUME=1 volumedown 9
Mod1 KP_Add      :ExecCommand SHOW_VOLUME=1 volumeup 2
Mod1 KP_Subtract :ExecCommand SHOW_VOLUME=1 volumedown 2
XF86AudioMute          :ExecCommand SHOW_VOLUME=1 set_volume 0
XF86AudioLowerVolume   :ExecCommand SHOW_VOLUME=1 volumedown 3
XF86AudioRaiseVolume   :ExecCommand SHOW_VOLUME=1 volumeup 3
# Do the same thing if I accidentally use the Mod4 instead of Fn key.
Mod4 F10   :ExecCommand SHOW_VOLUME=1 set_volume 0
Mod4 F11   :ExecCommand SHOW_VOLUME=1 volumedown 4
Mod4 F12   :ExecCommand SHOW_VOLUME=1 volumeup 4
# But sometimes I really want one-handed operation.
F10   :ExecCommand SHOW_VOLUME=1 set_volume 0
F11   :ExecCommand SHOW_VOLUME=1 volumedown 5
F12   :ExecCommand SHOW_VOLUME=1 volumeup 5
# Then how could we get real F10/11/12?
# Even when disabled above, these won't work: they get interpreted by Fluxbox again!
#XF86AudioLowerVolume   :ExecCommand xdotool key --clearmodifiers F11
#XF86AudioRaiseVolume   :ExecCommand xdotool key --clearmodifiers F12
#XF86AudioMute          :ExecCommand xdotool key --clearmodifiers F10
## My bbkeysrc uses Alt-Minus and Alt-Plus.
## (play)
# Mod1 KP_1 :ExecCommand xmms -p
Mod1 KP_1 :ExecCommand XLIB_SKIP_ARGB_VISUALS=1 xmms -p
## (stop)
Mod1 KP_3 :ExecCommand xmms -s
## (pause)
Mod1 KP_0 :ExecCommand xmms -u
## (back)
Mod1 KP_7 :ExecCommand xmms -r
## (forward)
#Mod1 KP_9 :ExecCommand xmms -f
Mod1 KP_9 :ExecCommand /home/joey/j/jsh nextsong
#XF86AudioNext :ExecCommand /home/joey/j/jsh nextsong
Mod1 KP_Delete :ExecCommand xmms -s
Mod1 KP_5     :ExecCommand whatsplaying
Mod1 slash    :ExecCommand whatsplaying
Mod4 slash    :ExecCommand whatsplaying
Control Mod1 slash    :ExecCommand whatsplaying
## Neither of these worked:
#Control Slash :ExecCommand whatsplaying
#Control Shift Slash :ExecCommand whatsplaying



### Tools

## Lock screen
Mod1 Control Shift L   :ExecCommand xscreensaver-command -lock

## Modify brightness
# Fn-Up
XF86AudioStop :ExecCommand adjust_brightness_by +20
# Fn-Down
XF86AudioPlay :ExecCommand adjust_brightness_by -10
# Shift-Fn-Up (not working)
XF86Eject :ExecCommand adjust_brightness_by +3
# Shift-Fn-Down (not working)
XF86AudioPause :ExecCommand adjust_brightness_by -3

## only work if your X is configured correctly:
## actually completely steals my keyboard!
# None XF86AudioPlay :ExecCommand xmms -u
# None XF86AudioStop :ExecCommand xmms -s
Mod1 Print :ExecCommand import -window root /tmp/screenshot-$$.bmp
Mod4 Print :ExecCommand import -window root /tmp/screenshot-$$.bmp

Control Mod4 k :ExecCommand save_desktop
Control Mod4 l :ExecCommand load_desktop

# Mod1 x :ExecCommand xterm -bg black -fg white -font '-*-fixed-*-r-*-*-12-*-*-*-*-*-*-*'
# Mod4 x :ExecCommand xterm

## This got me the font I wanted:
# Mod1 x :ExecCommand xtermbg
## TESTING if inlining makes it faster (was sometimes pretty sluggish under Fluxbox)
## Without /usr/bin/ this created a forkbomb!  Must have broken unj somehow.
## Yes this is much faster.  (But it lacks the lighter bg option.)
# Mod1 x :ExecCommand /usr/bin/xterm -cc 33:48,37:48,45-47:48,64:48,126:48 -rightbar +sb -sl 5000 -vb -si -sk -bg black -fg white -font '-b&h-lucidatypewriter-medium-r-normal-*-*-80-*-*-m-*-iso8859-1' -rightbar -j -s
## Now let's try the symlink in my PATH:
# Mod1 x :ExecCommand xterm
Mod4 x :ExecCommand /home/joey/j/tools/xterm
# The problem is my 'xtermbg' script runs my 'xterm' script and that uses 'unj'
# which is part of jsh.  For faster startup we need to run xterm without
# involving jsh (or trim down jsh's tools folder!).

Shift Mod4 x :ExecCommand gnome-terminal

# Mod4 x :ExecCommand xtermbg
#Mod4 x :ExecCommand XLIB_SKIP_ARGB_VISUALS=1 xmms -p

#Mod1 e :ExecCommand eterm
Mod4 e :ExecCommand ~/bin/konqueror
# Mod1 w :ExecCommand google-chrome
#Mod4 w :ExecCommand google-chrome
Mod4 w :ExecCommand focus-or-run -p chrome google-chrome
# Mod1 w :ExecCommand chromium-browser
# Mod4 w :ExecCommand chromium-browser

## Push windows to edges or corners of the screen (no resizing)
## These got a lot faster when I linked that script into ~/bin
## I think sometimes $JPATH/tools becomes un-cached and is then very slow to read the next time.
Mod4 KP_1 :ExecCommand put_current_xwindow sw
Mod4 KP_2 :ExecCommand put_current_xwindow bottom
Mod4 KP_3 :ExecCommand put_current_xwindow se
Mod4 KP_4 :ExecCommand put_current_xwindow left
# Mod4 KP_5 :ExecCommand put_current_xwindow center_x
# Mod4 KP_5 :ExecCommand put_current_xwindow center_y
Mod4 KP_5 :ExecCommand put_current_xwindow center
Mod4 KP_6 :ExecCommand put_current_xwindow right
Mod4 KP_7 :ExecCommand put_current_xwindow nw
Mod4 KP_8 :ExecCommand put_current_xwindow top
Mod4 KP_9 :ExecCommand put_current_xwindow ne

Mod1 Mod4 Up    :ExecCommand put_current_xwindow top_edge
Mod1 Mod4 Left  :ExecCommand put_current_xwindow left_edge
Mod1 Mod4 Right :ExecCommand put_current_xwindow right_edge
Mod1 Mod4 Down  :ExecCommand put_current_xwindow bottom_edge
Mod1 Mod4 K     :ExecCommand put_current_xwindow top
Mod1 Mod4 H     :ExecCommand put_current_xwindow left
Mod1 Mod4 L     :ExecCommand put_current_xwindow right
Mod1 Mod4 J     :ExecCommand put_current_xwindow bottom
# I tried to bind this to Hash, but could not find a way.
# When I do Alt-Enter or Alt-Win-Enter on an xterm, something toggles :Fullscreen, although the binding is not listed here.
Mod1 Mod4 BackSpace :ExecCommand put_current_xwindow center
# For some unknown reason, fluxbox complains about this.  (Perhaps because Mod1-Enter is already mapped?)
#Mod1 Mod4 Enter :ExecCommand put_current_xwindow center
Mod1 Mod4 Delete :ExecCommand put_current_xwindow nw
Mod1 Mod4 Shift Right :MoveRight +25
Mod1 Mod4 Shift Left :MoveRight -25
Mod1 Mod4 Shift Up :MoveUp +25
Mod1 Mod4 Shift Down :MoveUp -25

## Basic tiling - really sucks with kicker panels or gkrellm running.
## Oh apparently now gkrellm is ignored, which is good.
Control Mod1 T :ToggleCmd {ArrangeWindows (Stuck=no)} {ArrangeWindowsHorizontal (Stuck=no)} {ArrangeWindowsVertical (Stuck=no)}



## Mac-like keybinds

## These don't work too well, for various reasons:
## - If we press Ctrl-Foo but want to send Bar, we need to use --clearmodifierss otherwise when we send Bar, the system will see Ctrl-Bar.
## - When --clearmodifierss is used, but you hold the modifier key down, subsequent presses won't be intercepted.

#Control BackSpace       :ExecCommand xdotool key --clearmodifiers Delete

#Shift Mod1 braceleft    :ExecCommand xdotool key --clearmodifiers ctrl+Prior
#Shift Mod1 braceright   :ExecCommand xdotool key --clearmodifiers ctrl+Next

# Although in my reality, I am more likely to hit that when trying to switch Fluxbox tabs
#Shift Mod1 braceleft    :PrevTab
#Shift Mod1 braceright   :NextTab

## My old keyboard let me do Ctrl-Fn-Down = Ctrl-PageDown
## My new keyboard has audio keys on Fn-arrows, so we intercept those:
## But on Ubuntu 14.04 when I hold Control, these are not generated.
Control XF86AudioStop :ExecCommand xdotool key Prior
Control XF86AudioPlay :ExecCommand xdotool key Next
## Oh it seems this won't work.  xev reports that when I press Ctrl-Fn-arrows, weird things come out (Down becomes Left, Left emits nothing, Up becomes Up and Right becomes XF86AudioNext! asus x453m.

## These won't actually work while Mod4 Left/Right are intercepted for moving Fluxbox tabs.
#Mod4 Left               :Delay {ExecCommand xdotool key --clearmodifiers ctrl+Left    }  100
#Mod4 Right              :Delay {ExecCommand xdotool key --clearmodifiers ctrl+Right   }  100
#Mod4 Shift Left         :Delay {ExecCommand xdotool key --clearmodifiers shift+ctrl+Left  }  100
#Mod4 Shift Right        :Delay {ExecCommand xdotool key --clearmodifiers shift+ctrl+Right }  100

# On Xterm windows
# Disabled because too buggy
#Mod1 c                   :ExecCommand sleep 0.1 ; xdotool key --clearmodifiers ctrl+shift+c
#Mod1 v                   :ExecCommand sleep 0.1 ; xdotool key --clearmodifiers ctrl+shift+v
#Mod1 v                   :ExecCommand sleep 0.1 ; xdotool key --clearmodifiers shift+Insert
#Mod1 s                   :ExecCommand sleep 0.1 ; xdotool key --clearmodifiers ctrl+s
# I tried that with :Delay - it didn't work at all!  sleep did.  (fluxbox=1.3.5-2, Ubuntu 12.04 trusty)
# We can enable Alt-X = Cut when I stop hitting Alt-x to get an xterm!
#Mod1 x                   :ExecCommand sleep 0.1 ; xdotool key --clearmodifiers ctrl+x

# I keep pressing Alt-h but I should train to use Win-h.  In the meantime, let Alt-h do nothing.
#Mod1 h                   :ExecCommand :
#Mod1 z                   :ExecCommand :
#Mod1 a                   :ExecCommand :
#Mod1 x                   :ExecCommand echo X | osd_cat -d 1 -c red -A center -f '-*-lucida-*-r-*-*-*-1800-*-*-*-*-*-*'

#Mod1 Shift braceleft     :ExecCommand sleep 0.1 ; xdotool key --clearmodifiers ctrl+Prior
#Mod1 Shift braceright    :ExecCommand sleep 0.1 ; xdotool key --clearmodifiers ctrl+Next
# These were good but now I have bound them in WebStorm, where they do the same but are a lot snappier.
#Mod1 Shift braceleft     :ExecCommand sleep 0.01 ; xdotool key --clearmodifiers ctrl+Prior
#Mod1 Shift braceright    :ExecCommand sleep 0.01 ; xdotool key --clearmodifiers ctrl+Next

## Function-Arrow keys
#
# I was using this set successfully:
#
XF86AudioPrev           :ExecCommand xdotool key --clearmodifiers Home
XF86AudioNext           :ExecCommand xdotool key --clearmodifiers End
#XF86AudioStop           :ExecCommand xdotool key --clearmodifiers Prior
#XF86AudioPlay           :ExecCommand xdotool key --clearmodifiers Next
#
# An alternative with delay:
#
#XF86AudioPrev           :Delay {ExecCommand xdotool key --clearmodifiers Home    }  100
#XF86AudioNext           :Delay {ExecCommand xdotool key --clearmodifiers End     }  100
#XF86AudioStop           :Delay {ExecCommand xdotool key --clearmodifiers Prior    }  100
#XF86AudioPlay           :Delay {ExecCommand xdotool key --clearmodifiers Next   }  100



## For problematic mice (no right or middle buttons, no scrolling)

# Simulate right-click and middle-click with Control-click and Shift-Control-click
# Unfortunately (even without OnWindow) these binds do not apply to some dialogs (e.g. Chrome bookmark menus)
#OnWindow Shift Mouse1          :ExecCommand xdotool click 3
# I need Ctrl-click for browser's open-in-tab
#OnWindow Control Mouse1        :ExecCommand xdotool click 3
#OnWindow Control Shift Mouse1  :ExecCommand xdotool click 2

# But if I block Ctrl-click, then how do I perform Ctrl-click open-in-new-tab?
# I would like to map Mod1-click.
# We would need to clear the Mod1 and perhaps mousedown Ctrl before the click.
#OnWindow Mod1 Mouse1  :MacroCmd {ExecCommand xdotool keydown --clearmodifiers Ctrl_L} {ExecCommand xdotool click 1} {ExecCommand xdotool keyup Ctrl_L}
#OnWindow Mod1 Mouse1  :ExecCommand xdotool keydown Ctrl_L click 1 keyup Ctrl_L
# For these to run, I must disable the StartMoving on Mod1 Mouse1.  But even then they still don't work.

# In the end I have settled for the non-standard Ctrl-Shift-click
#OnWindow      Control Shift Mouse1 :ExecCommand xdotool click 3
#OnDesktop     Control Shift Mouse1 :ExecCommand xdotool click 3
#Control Shift Mouse1 :ExecCommand xdotool click 3
# This one works well:
#Control Shift Mouse1 :ExecCommand sleep 0.1 ; xdotool click 3
# For some reason these are not very reliable.  Perhaps the real ButtonPress/Release and the simulated ButtonPress/Release overlap.
#Mod4 Mouse1 :ExecCommand xdotool click 3
# If we wait just a moment for the real click to release, it's much more reliable.
# (Unlike the "click 1" below, it seems we don't need to worry about the modifier key being released.)
Mod4 Mouse1 :ExecCommand sleep 0.1 ; xdotool click 3
#Menu Mouse1 :ExecCommand xdotool click 3

# And for middle-click
#OnWindow Mod1 Control Shift Mouse1 :ExecCommand xdotool click 2
# Sends button 2 but also sends nasty modifiers!
#Mod1 Control Shift Mouse1 :ExecCommand sleep 0.1 ; xdotool click 2
# Even with these fewer modifiers it's often not useful.
#Shift Control Mouse3 :ExecCommand sleep 0.1 ; xdotool click 2
# Does nothing:
#Mod1 Control Shift Mouse1 :ExecCommand sleep 0.1 ; xdotool --clearmodifiers click 2
# No better:
#Mod1 Control Shift Mouse1 :MacroCmd {ExecCommand sleep 0.1 ; xdotool --clearmodifiers click 2} {ExecCommand xdotool click 2}
# Works, but only now that I actually can click button3 myself!
# But it has a problem: If I use Mod4 Mouse1 to simulate Mouse3, it gets caught here, and goes on to simulate Mouse2!
#Mod4 Mouse3 :ExecCommand sleep 0.1 ; xdotool click 2

# Why not make a keybind for normal click?
# Not working.
# I think, no matter what modifier key I choose, the click happens with that modifier key pressed, and that has a different meaning from a plain click!
#Mod4 c :ExecCommand xdotool click 1
# Does nothing:
#Mod4 c :ExecCommand xdotool --clearmodifiers click 1
# Ah but this works!  Give the user time to release the modifier key.
Mod4 c :MacroCmd {ExecCommand sleep 0.3 ; xdotool click 1}

# For scroll wheel up/down
# When you don't have a scroll wheel on your mouse or similar actions on your trackpad, then a workaround (for browsers) is to use the Up/Down keys.  Unfortunately this suffers from focus issues, while mouse wheel always focuses the element under the mouse.  That is why wheel emulation is desirable.
# These work but I'd rather keep them performing their default action
#Control Shift Up     :ExecCommand xdotool click 4
#Control Shift Down   :ExecCommand xdotool click 5
# Did not work.  I don't know why.
#Shift Mod4 Up     :ExecCommand xdotool click 4
#Shift Mod4 Down   :ExecCommand xdotool click 5
# Sometimes work, sometimes don't.  Chrome picks up the Control, and as a result it performs zoom instead of scroll!
# But if I run xdotool with --clearmodifiers, then nothing happens!  Because --clearmodifiers is only defined for xdotool's key commands.
#Control Mod4 Up     :ExecCommand xdotool click 4
#Control Mod4 Down   :ExecCommand xdotool click 5
# We are already using these for put_current_xwindow!
#Mod1 Mod4 Up     :ExecCommand xdotool click 4
#Mod1 Mod4 Down   :ExecCommand xdotool click 5
# These don't appear to work.  Probably because the Shift is interpreted?
#Shift Mod4 Up     :MacroCmd {ExecCommand xdotool click 6} {ExecCommand xdotool click 6}
#Shift Mod4 Down   :MacroCmd {ExecCommand xdotool click 7} {ExecCommand xdotool click 7}
#Shift Mod4 Left   :MacroCmd {ExecCommand xdotool click 6} {ExecCommand xdotool click 6}
#Shift Mod4 Right  :MacroCmd {ExecCommand xdotool click 7} {ExecCommand xdotool click 7}
# So we listen on Mod4 alone.
# These conflict with rules elsewhere, if they are not disabled: `Mod4 Left :MoveTabLeft` and trigger `Mod4 Mouse4 :PrevWorkspace 3`
#Mod4 Up     :MacroCmd {ExecCommand xdotool click 4} {ExecCommand xdotool click 4}
#Mod4 Down   :MacroCmd {ExecCommand xdotool click 5} {ExecCommand xdotool click 5}
#Mod4 Left   :MacroCmd {ExecCommand xdotool click 6} {ExecCommand xdotool click 6}
#Mod4 Right  :MacroCmd {ExecCommand xdotool click 7} {ExecCommand xdotool click 7}
# I love these!
#Mod4 k      :MacroCmd {ExecCommand xdotool click 4} {ExecCommand xdotool click 4}
#Mod4 j      :MacroCmd {ExecCommand xdotool click 5} {ExecCommand xdotool click 5}

# Alt-right-click usually resizes the window.  We could do it on Win-Alt-click or Ctrl-Alt-click.
# Alt-Win-click (Mod1 Mod4 Mouse1) gets intercepted by the window resize bind, even if we are focused on the titlebar.  So it never works.
# We could do it on Win-Alt-click or Ctrl-Alt-click.
#OnWindow    Mod1 Mod4 Mouse1   :MacroCmd {Raise} {Focus} {StartResizing NearestCorner}
# We can also trigger on "Move" event (not "Mouse" click event), but it makes no difference.
OnWindow    Mod1 Mod4 Move1    :MacroCmd {Raise} {Focus} {StartResizing NearestCorner}

# Start tabbing with a keybind
#OnWindow   Control Mod4 Mouse1 :MacroCmd {Focus} {StartTabbing} {Lower}
OnWindow   Control Mod1 Mouse1 :MacroCmd {Focus} {StartTabbing} {Lower}
# I think I prefer the second one.  It's easier for my thumb to find Alt than Win.


# Dash alternatives (quick search to access applications/files/bookmarks/contacts/...)
#Mod1 space :ExecCommand xterm -e fish
Mod1 space :ExecCommand albert show
# I preferred Synapse to Kupfer.  But it bound itself to <Control>space, which I use in bash, zsh and vim.  If I tried to bind it to <Super_L>space or <Alt_L>space then it would activate on *just* space!
#Mod4 space :ExecCommand synapse
#Mod4 space :ExecCommand kupfer
# Looks OK but unusable because it asks me to choose a different keybind on every launch, and then forgets it.
#Mod4 space :ExecCommand launchy
# Opens quickly.  A bit ugly with its two huge icons.  But seems to work ok.
Mod4 space :ExecCommand gnome-do
# Takes too long to open
Shift Mod4 space :ExecCommand xfce4-appfinder

# Mac-like keys
