# ssh-agent only needs to be run once per user, not for every shell started.
# So the first time we start ssh-agent, we store its details.  For other shells, we load up those details.

# However if we add too many keys to the ssh-agent, some ssh logins will fail, because the remote server will kick us out before we reach the valid key, because we tried to many failing keys!
# For that reason, this setup isn't really helpful.  So I have disabled it.

if [ -n "$SSH_AUTH_SOCK" ]
then
	# We already have what we need (this is probably a subshell)
	:
else
	# Is there an existing ssh-agent we can use?
	# (There is an untested assumption here that the ssh-agent we find running has the same PID as the one in the init file.)
	if [ -f "$HOME/.ssh-agent.init" ] && pgrep -u "$UID" ssh-agent >/dev/null
	then
		# An ssh-agent was already started, and it is still running.
		# We can use that ssh-agent by loading the existing init script.
		source "$HOME/.ssh-agent.init"
	else
		# Start a new ssh-agent, and store its details for other shells
		ssh-agent > "$HOME/.ssh-agent.init"
		source "$HOME/.ssh-agent.init"

		# Load my keys into the agent
		#[ -f "$HOME/.ssh/id_dsa" ] && ssh-add "$HOME/.ssh/id_dsa"
		#[ -f "$HOME/.ssh/id_rsa" ] && ssh-add "$HOME/.ssh/id_rsa"
		#[ -f "$HOME/.ssh/aws_work.pem" ] && ssh-add "$HOME/.ssh/aws_work.pem"

		# Load all keys and pem files
		for file in "$HOME"/.ssh/{id_*,*.pem}
		do
			if grep '[.]pub$' <<< "$file" >/dev/null
			then continue
			fi
			if grep '_with_pass' <<< "$file" >/dev/null
			then continue
			fi
			#echo "[start_ssh_agent] Adding ${file}" >&2
			ssh-add "$file"
		done 2>/dev/stdout | grep -v '\(No such file or directory$\|no matches found:\)' >/dev/stderr
		# This last line is a gnarly way to suppress errors from both bash and zsh when any of the globs fail to match
	fi
fi
