# .gitconfig



# Essential to avoid warnings
[user]
	name = Paul "Joey" Clark
	email = joeytwiddle@gmail.com



# Many of the following come from http://cheat.errtheblog.com/s/git

# Add colors
# Here 'white' is actually darker than the default!
[color]
	ui = auto
[color "branch"]
	current = green bold reverse   # default = green
	local = yellow   # default = white
	remote = white   # default = red
	ancestor = green # Non-standard, created by Joey for git_branch_status (gbs) in git_aliases
[color "diff"]
	# Commit messages and author will be pure white; I cannot find a place to configure them.
	# The commit id (also applies to any --decorate decorations which follow it)
	commit = yellow bold reverse
	meta = cyan bold
	frag = magenta
	# Actually white produces ^[[37m, which is slightly off-white.  Remove these for normal color.
	func = white
	plain = white
	old = red bold
	new = green bold
	# A known "bug" is that 'whitespace' only shows for *added* lines, not for *removed* lines.  All it ever did was show me ^M for DOS files.  But the default colour is red on white; I find this one less disruptive.
	whitespace = blue reverse
[color "status"]
	branch = green bold reverse
	added = yellow
	changed = green
	untracked = cyan



[core]
	# This allows you to ignore files in every repo you visit, although that can have some drawbacks:
	# - There may be generated files which should be ignored for all users of the repo, but you don't notice them
	# - When using third-party repos with unfamiliar filename extensions, you may be ignoring files which are actually important!
	#excludesfile = ~/.gitignore.global
	# This allows you to ignore files only on a project-by-project basis
	# It's basically the same as .git/info/excludes, but with a slightly more familiar name
	# NOTE: Only .gitignore.local in the root of the repo will be read.  The same filename in subfolders will be ignored.
	excludesfile = .gitignore.local
	# It may be better to learn to use .git/info/excludes instead
	#
	# May not be for everyone!  Actually changes your files as you commit them!
	# TODO: Look up what the hell this does and document it!
	#whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
	# Wrap lines when reading diffs
	# This sometimes drops the top of the log off the top of the screen, which is annoying
	#pager = less -r



# Aliases
[alias]
	# I never actually use these, since I have shell aliases to avoid typing 'git' so often!
	st = status
	ci = commit
	br = branch
	co = checkout
	df = diff
	dc = diff --cached
	# Adds file summaries to the standard log
	lf = log --stat
	# Adds actual diffs to the standard log
	lg = log -p -m
	# Summaries (without/with branches?)
	#lol = log --graph --decorate --oneline --abbrev-commit
	lol = log --graph --pretty=format:'%C(yellow)%h%C(magenta bold)%d%C(reset) %s %C(cyan)- %an (%ar)%Creset'
	lola = log --graph --decorate --oneline --abbrev-commit --all
	prettylog = log --graph --full-history --all --color --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"
	ls = ls-files
	# Show files ignored by git:
	ign = ls-files -o -i --exclude-standard
	ll = log -U0 -p -m
	ld = log -p --word-diff=plain -m
	# -p shows diffs.  -m shows diffs for merges

	credit = blame

	# Joey's:
	# Just a list of the files that have changed on the origin (I hope)
	# You need to do a 'fetch' beforehand but not a 'merge'
	#newfiles = ls-files -u
	#newfiles = diff-files --stat
	# This shows change-counts in local files (and perhaps also what is new on the origin)
	# (Now using --cached to drop uncommitted changes in local files.)
	# This can be used to show what files will change when you do git merge FETCH_HEAD
	# BUT note that diff-index shows the *opposite* of what the merge will perform!
	# I.e. additions are red, removals are green!  :P
	previewmaster = diff-index --color --stat origin/master --cached
	# Hmmm.  If no origin is set yet in .git/config, then we need to do this:
	# This shows only what is new on the origin (log and diffs!)
	# BUT ofc it only works after git fetch!
	#preview  = diff -p HEAD..origin
	#preview  = log -p HEAD..origin
	#preview  = log -p HEAD..origin/master
	#preview  = log -p HEAD..FETCH_HEAD
	#preview = diff-index --color --stat FETCH_HEAD --cached
	# Using diff --stat we can get the same thing but in the correct direction!
	preview = diff --stat HEAD..FETCH_HEAD
	previewdiff = diff HEAD..FETCH_HEAD
	#whatsnew = log --stat HEAD..FETCH_HEAD
	whatsnew = log --graph --pretty=format:'%C(yellow bold reverse)%h%C(reset)%C(magenta bold)%d%C(black bold) %s %C(cyan)- %an (%ar)%Creset%n' --stat HEAD..FETCH_HEAD

	# Just shows the number of commits by each user
	whodidwhat = shortlog -nsw -e

	recent = diff HEAD~~~

	# List the aliases we have
	alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t = \\2/' | sort

	list-branches = branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate

	# whatisnotpushed: Preview what will be sent when you push (or if indeed a push is needed).
	# As an alternative, you can read the "ahead" count shown on the second line of git status, or shown when switching between branches with git checkout.
	whatisnotpushed = log @{upstream}_HEAD..HEAD --oneline
	# One problem is that we might not be pushing *to* the upstream.  Upstream is where we are configured to pull from, not where we push to!  So our upstream might be master, or another branch, when we are actually pushing to the current branch (on the origin).  There is no @{d} or @{p}
	# Another problem is that the upstream might not be set.  I often use origin/branch_name without excplicitly setting/tracking it.

	# Shortcut:
	#winp   = log @{u}..HEAD --oneline
	# This will work if an upstream is not set, but only if 1. We were on the current branch when we last fetched, and 2. We have not pushed since the last fetch (FETCH_HEAD does not update when we push, only when we fetch or pull).
	winp   = log FETCH_HEAD..HEAD --oneline

	# Files that will be pushed:
	topush = diff-index --color --stat FETCH_HEAD

	# So the problem is {u} is where we are pulling from, which might be different from where we are pushing to.  To see what is not pushed, we need to compare against the remote branch we are pushing to.

	# None of the above appear to work properly.  But this works, if you provide the branch_name manually:
	#git log origin/branch_name..branch_name
	# although it shows merges as individual commits, which can be a little confusing.

	# Compare two branches; commits on one branch that are not reachable from another:
	#   git log branchA ^branchB
	# More examples here: http://gitref.org/inspect/

	# This simply runs whatever command you give it in the shell.
	# The advantage is that shell aliases are always run in the root.
	# So for example, you can now do "git exec make" from any sub-folder of your project, to run make in the project's root folder.
	exec = "!exec "

	# Just a reminder for myself.  Instead of stashing uncommitted changes, you can bring them with you when you switch branch.
	checkout-carrying-unstashed-changes = checkout -m

	# Git stash save only works on files which are tracked in the current branch.  Sometimes you have added a file, and want to stash that.  (Especially useful if this file exists in another branch which you intend to checkout soon.)
	# But beware: if you work on a tree where untracked files are normal, this will stash them!
	stash-all = stash -u

	# You can use this to apply a stash pop to a dirty tree (to workaround the error "Cannot apply to a dirty working tree, please stage your changes").
	stash-pop-force = !git stash show -p | git apply && git stash drop

	# From here but renamed: http://stackoverflow.com/questions/4577874/git-automatically-fast-forward-all-tracking-branches-on-pull#18817899
	merge-all-using-checkout = !"for b in $(git for-each-ref refs/heads --format='%(refname)') ; do git checkout ${b#refs/heads/} ; git pull --ff-only ; done"

	# A merge with uncommitted changes will happen fine if it does not affect the uncommitted files, but otherwise it will fail, and request that you stash your changes first.
	# This shortcut just does what I would usually do by hand
	merge-with-stash = !git merge-with-stashing
	merge-with-stashing = !git stash && git merge "$1" && git stash pop

	# My version which updates local branches to their remotes without changing the working tree (does not use checkout; is much faster).
	# WARNING: Does not lookup or merge from what each branch is tracking!  Instead it just assumes branch "$local" tracks "remote/$local"
	# To do it properly, we could get hold of the upstream names like this: git for-each-ref refs/heads --format="%(refname:short) -> %(upstream:short)"
	# Also beware, if applied to the current branch, working files will be behind and not updated.  (In my case, git still claimed an empty diff, only noticing the differences after a reset or attempted branch switch!  Git 1.7.10.4)
	# Inspiration was drawn from here: http://stackoverflow.com/questions/5147537/how-do-i-fast-forward-other-tracking-branches-in-git#5148202
	# and here: http://stackoverflow.com/questions/4156957/merging-branches-without-checkout/4157435#4157435
	merge-all = !"for local_branch in $(git for-each-ref refs/heads --format=\"%(refname:short)\") ; do remote_branch=\"origin/$local_branch\"; local_commit=$(git rev-parse -q --verify \"$local_branch\"); remote_commit=$(git rev-parse -q --verify \"$remote_branch\"); common_ancestor=$(git merge-base $local_branch $remote_branch 2>/dev/null); if [ ! \"$common_ancestor\" = \"$local_commit\" ]; then echo \"Could not be fast-forwarded: $local_branch\" >&2; else git update-ref refs/heads/$local_branch $remote_commit $local_commit; fi done"

	# Additionally I learned that it is easy to extend git with a script, *without* having to create an alias to link to it:
	#   "If you name it git-merge-ff and drop it in your bin directory, you can call it as a git command: git merge-ff."

	# This is just a reminder for me, since I forgot where this option lives.  I will probably remove it in future.
	add-partial = add --patch

	branch-by-date = for-each-ref --sort=committerdate refs/remotes --format="%(authordate:short)%09%(objectname:short)%09%1B[0;33m%(refname:short)%1B[m%09"
	unstage = reset --

	# Add config to pull all PRs
	# From: https://gist.github.com/piscisaureus/3342247#gistcomment-868560
	pull-prs          = config --add remote.origin.fetch   '+refs/pull/*/head:refs/remotes/origin/pr/*'
	pull-prs-upstream = config --add remote.upstream.fetch '+refs/pull/*/head:refs/remotes/upstream/pr/*'
	# Note that the line that gets added should actually be moved *above* the default fetch line
	# If not, `git pull --prune` will prune the PR branches, which you probably don't want
	# This shell function can do that: https://github.com/jasoncodes/dotfiles/blob/a29509902cb839b6aaf26d2d5409d66199b86d1d/shell/aliases/git.sh#L93-L110
	# We could do it in one line like this.
	# But actually this is NOT a good style.  It relies on the unset happening after the read, which is not guaranteed!
	#   git config --get-all remote.origin.fetch   | reverse | ( git config --unset-all remote.origin.fetch   ; while read X; do git config --add remote.origin.fetch   "$X"; done )
	#   git config --get-all remote.upstream.fetch | reverse | ( git config --unset-all remote.upstream.fetch ; while read X; do git config --add remote.upstream.fetch "$X"; done )

	# Grab the patch for one PR and apply it directly to working files (needs editing)
	# From: https://gist.github.com/piscisaureus/3342247#gistcomment-897339
	patch-pr = echo "git checkout master curl https://github.com/project/repo/pulls/3.patch | git am"

	# From: https://gist.github.com/gnarf/5406589
	# Fetch and checkout one specific PR: git pr 314
	#pr   = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
	# Same for bitbucket/stash remotes
	#spr  = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull-requests/$1/from:pr/$1 && git checkout pr/$1; }; f"
	# Remove all pulled PRs
	pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"

	# Modified version of gnarf's by andreineculau
	# Usage:
	#   git pr 314
	#   git pr 314 upstream
	pr = !git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && :

	# Alternatives:
	# https://github.com/splitbrain/git-pull-request



### The following options are rather more serious, because they affect how git modifies files.



# % git config core.autocrlf true
#
# autocrlf setting tells git to convert the newlines to the system's standard
# when checking out files, and to LF newlines when committing in
#
# I have this disabled for now, concerned about Beeb lookup tables and other binaries.
# [core]
	# autocrlf=true



# % git config branch.autosetupmerge true
#
# tells git-branch and git-checkout to setup new branches so that git-pull(1)
# will appropriately merge from that remote branch.  Recommended.  Without this,
# you will have to add --track to your branch command or manually merge remote
# tracking branches with "fetch" and then "merge".
#
# Disabled because I want git to be as difficult for me as for someone without my config.
#
# Recent versions of git now default to 'true', but that is different from 'always'.
# 'true' only sets up the remote tracking branch when we first check out from a remote branch,
# whereas 'always' also sets one up if we are branching off a local branch (creating a new branch).
#
#[branch]
#	autosetupmerge = true

# In a similar vein, this will make it so that pushes will go the same place that pulls come from:
#[push]
#	default=tracking



# To ignore whitespace
#
# % git config apply.whitespace nowarn
#
# I have this disabled because I use coffeescript, and in general I like
# whitespace to be meaningful!
#
#[apply]
#	whitespace = nowarn



## Of interest:
# http://stackoverflow.com/questions/849308/pull-push-from-multiple-remote-locations
# (elliot's answer: automatically push to two repositories)
# The basics of setting up a remote tracking branch:
# http://stackoverflow.com/questions/520650/how-do-you-make-an-existing-git-branch-track-a-remote-branch?rq=1


# Use vimdiff once each file to review diffs, by typing git difftool.
# One disadvantage is the ugliness of breaking out with Ctrl-C if you don't want to diff all the remaining files.
# Without this, you may be presented with other options:
#   Other options are available: merge tool candidates: opendiff kdiff3 tkdiff xxdiff meld kompare gvimdiff diffuse ecmerge p4merge araxis bc3 emerge vimdiff
[diff]
	tool = vimdiff
[difftool]
	prompt = false

[diff]
	# When showing diffs, present renames as renames, with a similarity index.  You will not see the lines of code which were moved.
	# However it does report added or removed binaries in a rather odd way: "Binary files /dev/null and b/example/image.png differ"
	renames = true

[format]
	# Simple:
	#pretty = %C(yellow)%h%C(magenta bold)%d%C(reset) %s %C(cyan)- %an (%ar)%Creset
	# Mine:
	#pretty = %C(yellow bold reverse)%h%C(reset)%C(magenta bold)%d%C(black bold) %s %C(cyan)- %an (%ar)%Creset
	# Unfortunately, setting these will apply to all logs, so we can't ever see a normal log!

[push]
	# Well this is not available in git 1.7.10.4
	#default = simple
	default = current

# When git prompts for a password, keep it cached for 10 hours, so you won't have to type it again.
# It is stored in memory (a little safer than storing on disk).  It only works for https, not ssh URLs.
[credential]
	helper = cache --timeout=36000
	# Mac OSX users may prefer:
	#helper = osxkeychain
	# or
	#helper = /usr/local/share/gcm-core/git-credential-manager

# If you don't want to type a password ever, you can use an SSH or GPG key:
#   https://github.com/settings/keys
#
# Add your SSH key to github, and then use ssh-agent.
#   https://help.github.com/articles/generating-ssh-keys/
# If you run into trouble authenticating, this page may help:
#   https://help.github.com/articles/error-permission-denied-publickey/
# Note also that the SSH key is only valid for git-protocol remotes, not https remotes!
#
# Alternatively, you can use a GPG key:
#   https://help.github.com/articles/generating-a-gpg-key/

[merge]
	## When marking conflict in a file, also shows original (base) lines, after ||||||||
	#conflictstyle = diff3
	tool = gvimdiff
	#tool = kdiff3

[rerere]
	enabled = true

[url "https://joeytwiddle@github.com/"]
	insteadOf = https://github.com/

# What's that you say?  You hate merge bubbles and want to rebase instead of merge?  Use `git pull --rebase`!
#   http://stevenharman.net/git-pull-with-automatic-rebase
# But I fear you may be in for some explosions.  :-)
#   git config branch.autosetuprebase always # Force all new branches to automatically use rebase
#   git config branch.*branch-name*.rebase true # Force existing branches to use rebase.

[rebase]
	# When displaying commits in git-rebase --interactive, also display the authors
	instructionFormat = %s - %an

[mergetool]
	# This prevents mergetool from leaving those annoying <file>.orig files around
	keepBackup = false

[http]
	# Prevents the error "fatal: The remote end hung up unexpectedly"
	# This can also be fixed by switching from https to git:
	#     https://github.com/username/project
	#     ->
	#     git@github.com:username/project.git
	postBuffer = 10g
